{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        arabic: [\"var(--font-arabic)\"],\n        sans: [\"var(--font-sans)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        fadeInUp: {\n          from: {\n            opacity: \"0\",\n            transform: \"translateY(20px)\",\n          },\n          to: {\n            opacity: \"1\",\n            transform: \"translateY(0)\",\n          },\n        },\n        slideInLeft: {\n          from: {\n            opacity: \"0\",\n            transform: \"translateX(-20px)\",\n          },\n          to: {\n            opacity: \"1\",\n            transform: \"translateX(0)\",\n          },\n        },\n        pulse: {\n          \"0%, 100%\": {\n            opacity: \"1\",\n          },\n          \"50%\": {\n            opacity: \"0.5\",\n          },\n        },\n        spin: {\n          from: {\n            transform: \"rotate(0deg)\",\n          },\n          to: {\n            transform: \"rotate(360deg)\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        fadeInUp: \"fadeInUp 0.6s ease-out\",\n        slideInLeft: \"slideInLeft 0.5s ease-out\",\n        pulse: \"pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite\",\n        spin: \"spin 1s linear infinite\",\n      },\n      backdropBlur: {\n        xs: '2px',\n        sm: '4px',\n        md: '12px',\n        lg: '16px',\n        xl: '24px',\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3860},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/openai.ts":{"content":"import OpenAI from \"openai\";\n\nif (!process.env.OPENAI_API_KEY) {\n  throw new Error(\"OPENAI_API_KEY environment variable is required\");\n}\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n});\n\ninterface CodeGenerationRequest {\n  description: string;\n  language: string;\n  framework?: string;\n  features?: string[];\n}\n\ninterface CodeGenerationResponse {\n  files: Record<string, string>;\n  description: string;\n  setup_instructions: string;\n}\n\ninterface FixCodeResponse {\n  fixedCode: string;\n  explanation: string;\n}\n\n// 🔒 دالة parsing آمنة\nfunction safeJSONParse<T>(text: string): T {\n  try {\n    const match = text.match(/\\{[\\s\\S]*\\}/);\n    return match ? JSON.parse(match[0]) : ({} as T);\n  } catch {\n    return {} as T;\n  }\n}\n\n// ✨ توليد مشروع كامل\nexport async function generateCodeFromDescription(\n  request: CodeGenerationRequest\n): Promise<CodeGenerationResponse> {\n  const { description, language, framework, features } = request;\n\n  const prompt = `\nYou are an expert web developer. Generate a complete, production-ready project based on this description:\n\nDescription: ${description}\nLanguage: ${language}\nFramework: ${framework || \"vanilla\"}\nFeatures: ${features?.join(\", \") || \"basic functionality\"}\n\nRequirements:\n1. Generate complete file structure with all necessary files\n2. Include modern, responsive design with Arabic language support (RTL)\n3. Use best practices and clean, maintainable code\n4. Include proper error handling and validation\n5. Make it production-ready with security considerations\n\nRespond with JSON in this format:\n{\n  \"files\": {\n    \"filename.ext\": \"file content\",\n    \"folder/file.ext\": \"file content\"\n  },\n  \"description\": \"Brief description of what was created\",\n  \"setup_instructions\": \"How to run/deploy this project\"\n}\n\nMake sure all code is complete and functional. For React projects, use modern hooks and TypeScript. For styling, use Tailwind CSS with RTL support.\n`;\n\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\", // released August 7, 2025\n      messages: [\n        {\n          role: \"system\",\n          content:\n            \"You are a senior full-stack developer who creates complete, production-ready applications. Always respond with valid JSON containing the file structure and code.\",\n        },\n        {\n          role: \"user\",\n          content: prompt,\n        },\n      ],\n      response_format: { type: \"json_object\" },\n      temperature: 0.7,\n      max_tokens: 8000,\n    });\n\n    const raw = response.choices[0].message.content || \"{}\";\n    return safeJSONParse<CodeGenerationResponse>(raw);\n  } catch (error) {\n    return {\n      files: {},\n      description: \"Error occurred\",\n      setup_instructions: `Generation failed: ${\n        error instanceof Error ? error.message : \"Unknown error\"\n      }`,\n    };\n  }\n}\n\n// ✨ اقتراح تحسين\nexport async function improveSuggestion(\n  code: string,\n  issue: string\n): Promise<string> {\n  const prompt = `\nAs an expert developer, analyze this code and provide a specific improvement suggestion for the issue described.\n\nCode:\n${code}\n\nIssue: ${issue}\n\nProvide a clear, actionable suggestion with example code if needed. Focus on best practices, performance, and maintainability.\n`;\n\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\", // released August 7, 2025\n      messages: [\n        {\n          role: \"system\",\n          content:\n            \"You are a helpful coding assistant who provides clear, actionable advice for code improvements.\",\n        },\n        {\n          role: \"user\",\n          content: prompt,\n        },\n      ],\n      temperature: 0.3,\n      max_tokens: 2000,\n    });\n\n    return response.choices[0].message.content || \"Unable to provide suggestion.\";\n  } catch (error) {\n    return `Improvement suggestion failed: ${\n      error instanceof Error ? error.message : \"Unknown error\"\n    }`;\n  }\n}\n\n// ✨ إصلاح الكود مع شرح\nexport async function fixCodeError(\n  code: string,\n  error: string\n): Promise<FixCodeResponse> {\n  const prompt = `\nFix this code error:\n\nCode:\n${code}\n\nError: ${error}\n\nProvide the corrected code with explanation of what was wrong and how it was fixed.\nRespond with JSON in this format:\n{\n  \"fixed_code\": \"the corrected code\",\n  \"explanation\": \"what was wrong and how it was fixed\"\n}\n`;\n\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\", // released August 7, 2025\n      messages: [\n        {\n          role: \"system\",\n          content:\n            \"You are an expert debugger who can quickly identify and fix code errors. Always respond with valid JSON.\",\n        },\n        {\n          role: \"user\",\n          content: prompt,\n        },\n      ],\n      response_format: { type: \"json_object\" },\n      temperature: 0.1,\n      max_tokens: 2000,\n    });\n\n    const raw = response.choices[0].message.content || \"{}\";\n    const result = safeJSONParse<any>(raw);\n\n    return {\n      fixedCode: result.fixed_code || code,\n      explanation: result.explanation || \"No explanation provided\",\n    };\n  } catch (error) {\n    return {\n      fixedCode: code,\n      explanation: `Fix attempt failed: ${\n        error instanceof Error ? error.message : \"Unknown error\"\n      }`,\n    };\n  }\n}\n","size_bytes":5324},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer } from \"http\";\nimport { WebSocketServer } from \"ws\";\nimport { setupAuth } from \"./replitAuth\";\nimport { storage } from \"./storage\";\nimport { insertProjectSchema, insertTemplateSchema, insertCollaboratorSchema, insertAnalyticsSchema } from \"@shared/schema\";\nimport OpenAI from \"openai\";\n\nconst client = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n});\n\nif (!process.env.OPENAI_API_KEY) {\n  throw new Error(\"Missing OPENAI_API_KEY environment variable\");\n}\n\ninterface CodeResponse {\n  success: boolean;\n  code?: string;\n  explanation?: string;\n  suggestions?: string[];\n  error?: string;\n}\n\n/**\n * Safely parses JSON from model output, even if extra text/noise is included\n */\nfunction safeJSONParse<T = any>(text: string): T | null {\n  try {\n    const match = text.match(/\\{[\\s\\S]*\\}/);\n    if (!match) return null;\n    return JSON.parse(match[0]) as T;\n  } catch {\n    return null;\n  }\n}\n\n/**\n * Unified function to call OpenAI with given prompt\n */\nasync function callOpenAI(prompt: string): Promise<CodeResponse> {\n  try {\n    const completion = await client.chat.completions.create({\n      model: \"gpt-5\",\n      messages: [{ role: \"user\", content: prompt }],\n      max_tokens: 8000,\n      temperature: 0.2,\n    });\n\n    const rawOutput = completion.choices[0].message?.content ?? \"\";\n    const parsed = safeJSONParse<CodeResponse>(rawOutput);\n\n    if (!parsed) {\n      return { success: false, error: \"Failed to parse model output\", };\n    }\n\n    return parsed;\n  } catch (err: any) {\n    return { success: false, error: err.message || \"Unknown error\" };\n  }\n}\n\n/**\n * Generate new code based on user instructions\n */\nexport async function generateCode(prompt: string): Promise<CodeResponse> {\n  return callOpenAI(\n    `You are Markod AI, a professional code generator. \n    Generate clean, production-ready code. \n    Respond strictly in this JSON format:\n    {\n      \"success\": true,\n      \"code\": \"...code here...\",\n      \"explanation\": \"Explain how this code works.\"\n    }\n    User request: ${prompt}`\n  );\n}\n\n/**\n * Suggest improvements to existing code\n */\nexport async function suggestImprovements(code: string): Promise<CodeResponse> {\n  return callOpenAI(\n    `You are Markod AI, a senior code reviewer. \n    Suggest clear improvements to the given code.\n    Respond strictly in this JSON format:\n    {\n      \"success\": true,\n      \"suggestions\": [\"...\", \"...\"],\n      \"explanation\": \"Summarize why these changes matter.\"\n    }\n    Code:\\n${code}`\n  );\n}\n\n/**\n * Fix errors in code and explain the fix\n */\nexport async function fixCodeError(code: string, error: string): Promise<CodeResponse> {\n  return callOpenAI(\n    `You are Markod AI, a debugging expert. \n    Fix the error in the given code and explain the fix.\n    Respond strictly in this JSON format:\n    {\n      \"success\": true,\n      \"code\": \"...corrected code...\",\n      \"explanation\": \"Explain what was wrong and how it was fixed.\"\n    }\n    Code:\\n${code}\n    Error:\\n${error}`\n  );\n}\n\n/**\n * Register all Express routes and return HTTP server\n */\nexport async function registerRoutes(app: Express) {\n  // Set up authentication\n  await setupAuth(app);\n\n  // API Routes for users\n  app.get(\"/api/user/:id\", async (req, res) => {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // API Routes for projects\n  app.get(\"/api/projects\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string;\n      if (!userId) {\n        return res.status(400).json({ message: \"User ID required\" });\n      }\n      const projects = await storage.getProjectsByUser(userId);\n      res.json(projects);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const project = await storage.getProject(req.params.id);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      res.json(project);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/projects\", async (req, res) => {\n    try {\n      const validatedData = insertProjectSchema.parse(req.body);\n      const project = await storage.createProject(validatedData);\n      res.status(201).json(project);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid project data\" });\n    }\n  });\n\n  app.put(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const project = await storage.updateProject(req.params.id, req.body);\n      res.json(project);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/projects/:id\", async (req, res) => {\n    try {\n      await storage.deleteProject(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // API Routes for templates\n  app.get(\"/api/templates\", async (req, res) => {\n    try {\n      const category = req.query.category as string;\n      const templates = await storage.getTemplates(category);\n      res.json(templates);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/templates/:id\", async (req, res) => {\n    try {\n      const template = await storage.getTemplate(req.params.id);\n      if (!template) {\n        return res.status(404).json({ message: \"Template not found\" });\n      }\n      res.json(template);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/templates\", async (req, res) => {\n    try {\n      const validatedData = insertTemplateSchema.parse(req.body);\n      const template = await storage.createTemplate(validatedData);\n      res.status(201).json(template);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid template data\" });\n    }\n  });\n\n  // OpenAI API Routes\n  app.post(\"/api/generate-code\", async (req, res) => {\n    try {\n      const { prompt } = req.body;\n      if (!prompt) {\n        return res.status(400).json({ message: \"Prompt is required\" });\n      }\n      const result = await generateCode(prompt);\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/suggest-improvements\", async (req, res) => {\n    try {\n      const { code } = req.body;\n      if (!code) {\n        return res.status(400).json({ message: \"Code is required\" });\n      }\n      const result = await suggestImprovements(code);\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/fix-code\", async (req, res) => {\n    try {\n      const { code, error } = req.body;\n      if (!code || !error) {\n        return res.status(400).json({ message: \"Code and error are required\" });\n      }\n      const result = await fixCodeError(code, error);\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Create HTTP server\n  const server = createServer(app);\n\n  // Set up WebSocket server for real-time collaboration on dedicated path\n  const wss = new WebSocketServer({ server, path: \"/ws\" });\n  \n  wss.on('connection', (ws) => {\n    ws.on('message', (data) => {\n      try {\n        const message = JSON.parse(data.toString());\n        \n        if (message.type === 'join_project') {\n          // Handle project joining logic\n          ws.send(JSON.stringify({ type: 'joined', projectId: message.projectId }));\n        } else if (message.type === 'code_change') {\n          // Broadcast code changes to other clients\n          wss.clients.forEach((client) => {\n            if (client !== ws && client.readyState === client.OPEN) {\n              client.send(JSON.stringify({\n                type: 'code_change',\n                data: message.data\n              }));\n            }\n          });\n        }\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n      }\n    });\n  });\n\n  return server;\n}\n","size_bytes":8408},"server/storage.ts":{"content":"import {\n  users,\n  projects,\n  templates,\n  collaborators,\n  analytics,\n  type User,\n  type UpsertUser,\n  type Project,\n  type InsertProject,\n  type Template,\n  type InsertTemplate,\n  type Collaborator,\n  type InsertCollaborator,\n  type Analytics,\n  type InsertAnalytics,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, or, ilike, sql } from \"drizzle-orm\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations\n  // (IMPORTANT) these user operations are mandatory for Replit Auth.\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  updateUserStripeInfo(userId: string, stripeCustomerId: string, stripeSubscriptionId: string): Promise<User>;\n\n  // Project operations\n  createProject(project: InsertProject): Promise<Project>;\n  getProject(id: string): Promise<Project | undefined>;\n  getProjectsByUser(userId: string): Promise<Project[]>;\n  updateProject(id: string, updates: Partial<InsertProject>): Promise<Project>;\n  deleteProject(id: string): Promise<void>;\n  searchProjects(query: string, userId?: string): Promise<Project[]>;\n\n  // Template operations\n  getTemplates(category?: string): Promise<Template[]>;\n  getTemplate(id: string): Promise<Template | undefined>;\n  createTemplate(template: InsertTemplate): Promise<Template>;\n  incrementTemplateDownloads(id: string): Promise<void>;\n\n  // Collaboration operations\n  addCollaborator(collaborator: InsertCollaborator): Promise<Collaborator>;\n  getProjectCollaborators(projectId: string): Promise<Collaborator[]>;\n  removeCollaborator(projectId: string, userId: string): Promise<void>;\n\n  // Analytics operations\n  logAnalyticsEvent(event: InsertAnalytics): Promise<Analytics>;\n  getProjectAnalytics(projectId: string): Promise<Analytics[]>;\n  getUserAnalytics(userId: string): Promise<Analytics[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  // (IMPORTANT) these user operations are mandatory for Replit Auth.\n\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUserStripeInfo(userId: string, stripeCustomerId: string, stripeSubscriptionId: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({\n        stripeCustomerId,\n        stripeSubscriptionId,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  // Project operations\n  async createProject(project: InsertProject): Promise<Project> {\n    const [newProject] = await db.insert(projects).values(project).returning();\n    return newProject;\n  }\n\n  async getProject(id: string): Promise<Project | undefined> {\n    const [project] = await db.select().from(projects).where(eq(projects.id, id));\n    return project;\n  }\n\n  async getProjectsByUser(userId: string): Promise<Project[]> {\n    return await db\n      .select()\n      .from(projects)\n      .where(eq(projects.userId, userId))\n      .orderBy(desc(projects.updatedAt));\n  }\n\n  async updateProject(id: string, updates: Partial<InsertProject>): Promise<Project> {\n    const [project] = await db\n      .update(projects)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(projects.id, id))\n      .returning();\n    return project;\n  }\n\n  async deleteProject(id: string): Promise<void> {\n    await db.delete(projects).where(eq(projects.id, id));\n  }\n\n  async searchProjects(query: string, userId?: string): Promise<Project[]> {\n    const conditions = [\n      or(\n        ilike(projects.name, `%${query}%`),\n        ilike(projects.description, `%${query}%`)\n      )\n    ];\n\n    if (userId) {\n      conditions.push(eq(projects.userId, userId));\n    } else {\n      conditions.push(eq(projects.isPublic, true));\n    }\n\n    return await db\n      .select()\n      .from(projects)\n      .where(and(...conditions))\n      .orderBy(desc(projects.updatedAt));\n  }\n\n  // Template operations\n  async getTemplates(category?: string): Promise<Template[]> {\n    const query = db.select().from(templates);\n    \n    if (category) {\n      return await query.where(eq(templates.category, category)).orderBy(desc(templates.downloads));\n    }\n    \n    return await query.orderBy(desc(templates.downloads));\n  }\n\n  async getTemplate(id: string): Promise<Template | undefined> {\n    const [template] = await db.select().from(templates).where(eq(templates.id, id));\n    return template;\n  }\n\n  async createTemplate(template: InsertTemplate): Promise<Template> {\n    const [newTemplate] = await db.insert(templates).values(template).returning();\n    return newTemplate;\n  }\n\n  async incrementTemplateDownloads(id: string): Promise<void> {\n    await db\n      .update(templates)\n      .set({ downloads: sql`downloads + 1` })\n      .where(eq(templates.id, id));\n  }\n\n  // Collaboration operations\n  async addCollaborator(collaborator: InsertCollaborator): Promise<Collaborator> {\n    const [newCollaborator] = await db.insert(collaborators).values(collaborator).returning();\n    return newCollaborator;\n  }\n\n  async getProjectCollaborators(projectId: string): Promise<Collaborator[]> {\n    return await db\n      .select()\n      .from(collaborators)\n      .where(eq(collaborators.projectId, projectId));\n  }\n\n  async removeCollaborator(projectId: string, userId: string): Promise<void> {\n    await db\n      .delete(collaborators)\n      .where(and(eq(collaborators.projectId, projectId), eq(collaborators.userId, userId)));\n  }\n\n  // Analytics operations\n  async logAnalyticsEvent(event: InsertAnalytics): Promise<Analytics> {\n    const [newEvent] = await db.insert(analytics).values(event).returning();\n    return newEvent;\n  }\n\n  async getProjectAnalytics(projectId: string): Promise<Analytics[]> {\n    return await db\n      .select()\n      .from(analytics)\n      .where(eq(analytics.projectId, projectId))\n      .orderBy(desc(analytics.createdAt));\n  }\n\n  async getUserAnalytics(userId: string): Promise<Analytics[]> {\n    return await db\n      .select({\n        id: analytics.id,\n        projectId: analytics.projectId,\n        event: analytics.event,\n        metadata: analytics.metadata,\n        createdAt: analytics.createdAt,\n      })\n      .from(analytics)\n      .innerJoin(projects, eq(analytics.projectId, projects.id))\n      .where(eq(projects.userId, userId))\n      .orderBy(desc(analytics.createdAt));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":6786},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\n// Session storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User roles enum\nexport const userRoleEnum = pgEnum('user_role', ['admin', 'executive', 'developer', 'designer', 'trial']);\n\n// User storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: userRoleEnum(\"role\").default('trial'),\n  stripeCustomerId: varchar(\"stripe_customer_id\"),\n  stripeSubscriptionId: varchar(\"stripe_subscription_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Projects table\nexport const projects = pgTable(\"projects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  templateId: varchar(\"template_id\").references(() => templates.id),\n  files: jsonb(\"files\").$type<Record<string, string>>().default({}),\n  isPublic: boolean(\"is_public\").default(false),\n  deployUrl: varchar(\"deploy_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Templates table\nexport const templates = pgTable(\"templates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  category: varchar(\"category\").notNull(), // 'business', 'ecommerce', 'blog', 'dashboard'\n  previewImage: varchar(\"preview_image\"),\n  files: jsonb(\"files\").$type<Record<string, string>>().notNull(),\n  downloads: integer(\"downloads\").default(0),\n  isPremium: boolean(\"is_premium\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Collaborators table for real-time collaboration\nexport const collaborators = pgTable(\"collaborators\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").notNull().references(() => projects.id),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  permission: varchar(\"permission\").notNull(), // 'read', 'write', 'admin'\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Analytics table\nexport const analytics = pgTable(\"analytics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").notNull().references(() => projects.id),\n  event: varchar(\"event\").notNull(), // 'view', 'edit', 'deploy'\n  metadata: jsonb(\"metadata\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  projects: many(projects),\n  collaborations: many(collaborators),\n}));\n\nexport const projectsRelations = relations(projects, ({ one, many }) => ({\n  user: one(users, {\n    fields: [projects.userId],\n    references: [users.id],\n  }),\n  template: one(templates, {\n    fields: [projects.templateId],\n    references: [templates.id],\n  }),\n  collaborators: many(collaborators),\n  analytics: many(analytics),\n}));\n\nexport const templatesRelations = relations(templates, ({ many }) => ({\n  projects: many(projects),\n}));\n\nexport const collaboratorsRelations = relations(collaborators, ({ one }) => ({\n  project: one(projects, {\n    fields: [collaborators.projectId],\n    references: [projects.id],\n  }),\n  user: one(users, {\n    fields: [collaborators.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const analyticsRelations = relations(analytics, ({ one }) => ({\n  project: one(projects, {\n    fields: [analytics.projectId],\n    references: [projects.id],\n  }),\n}));\n\n// Schema types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n\nexport const insertProjectSchema = createInsertSchema(projects).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\nexport type InsertProject = z.infer<typeof insertProjectSchema>;\nexport type Project = typeof projects.$inferSelect;\n\nexport const insertTemplateSchema = createInsertSchema(templates).omit({\n  id: true,\n  createdAt: true,\n});\nexport type InsertTemplate = z.infer<typeof insertTemplateSchema>;\nexport type Template = typeof templates.$inferSelect;\n\nexport const insertCollaboratorSchema = createInsertSchema(collaborators).omit({\n  id: true,\n  createdAt: true,\n});\nexport type InsertCollaborator = z.infer<typeof insertCollaboratorSchema>;\nexport type Collaborator = typeof collaborators.$inferSelect;\n\nexport const insertAnalyticsSchema = createInsertSchema(analytics).omit({\n  id: true,\n  createdAt: true,\n});\nexport type InsertAnalytics = z.infer<typeof insertAnalyticsSchema>;\nexport type Analytics = typeof analytics.$inferSelect;\n","size_bytes":5450},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Landing from \"@/pages/landing\";\nimport Home from \"@/pages/home\";\nimport Editor from \"@/pages/editor\";\nimport Templates from \"@/pages/templates\";\nimport Pricing from \"@/pages/pricing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/editor/:id?\" component={Editor} />\n          <Route path=\"/templates\" component={Templates} />\n          <Route path=\"/pricing\" component={Pricing} />\n          <Route path=\"/dashboard\" component={Dashboard} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div dir=\"rtl\" className=\"min-h-screen bg-background text-foreground\">\n          <Toaster />\n          <Router />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1465},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+Arabic:wght@300;400;500;600;700&family=Inter:wght@300;400;500;600;700&family=JetBrains+Mono:wght@300;400;500&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 20%, 98%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(221.2, 83.2%, 53.3%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 47.4%, 11.2%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(142.1, 76.2%, 36.3%);\n  --accent-foreground: hsl(355.7, 100%, 97.3%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(221.2, 83.2%, 53.3%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-arabic: 'Noto Sans Arabic', sans-serif;\n  --font-sans: 'Inter', sans-serif;\n  --font-mono: 'JetBrains Mono', monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 2px 4px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 4px 6px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 8px 10px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(203.7736, 87.6033%, 52.5490%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195.0000, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(205.7143, 70%, 7.8431%);\n  --accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(202.8169, 89.1213%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-arabic: 'Noto Sans Arabic', sans-serif;\n  --font-sans: 'Inter', sans-serif;\n  --font-mono: 'JetBrains Mono', monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 2px 4px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 4px 6px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 8 10px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n    font-family: var(--font-arabic);\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-arabic);\n  }\n}\n\n/* Custom styles for Arabic UI */\n.glass-card {\n  background: rgba(255, 255, 255, 0.25);\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.18);\n}\n\n.code-editor {\n  font-family: var(--font-mono);\n  background: #1e1e1e;\n  color: #d4d4d4;\n}\n\n.syntax-keyword { color: #569cd6; }\n.syntax-string { color: #ce9178; }\n.syntax-comment { color: #6a9955; }\n.syntax-number { color: #b5cea8; }\n\n.gradient-bg {\n  background: linear-gradient(135deg, hsl(221.2, 83.2%, 53.3%) 0%, hsl(142.1, 76.2%, 36.3%) 100%);\n}\n\n.hover-scale {\n  transition: transform 0.2s ease-in-out;\n}\n\n.hover-scale:hover {\n  transform: scale(1.02);\n}\n\n/* Grid pattern for background */\n.bg-grid-slate-100 {\n  background-image: url(\"data:image/svg+xml,%3csvg width='40' height='40' xmlns='http://www.w3.org/2000/svg'%3e%3cdefs%3e%3cpattern id='grid' width='40' height='40' patternUnits='userSpaceOnUse'%3e%3cpath d='m 40 0 l 0 40 l -40 0 l 0 -40 z' fill='none' stroke='%23e2e8f0' stroke-width='1'/%3e%3c/pattern%3e%3c/defs%3e%3crect width='100%25' height='100%25' fill='url(%23grid)'/%3e%3c/svg%3e\");\n}\n\n/* Monaco Editor custom styles */\n.monaco-editor .margin-view-overlays .line-numbers {\n  color: #858585;\n}\n\n.monaco-editor .current-line ~ .line-numbers {\n  color: #c6c6c6;\n}\n\n/* Scrollbar styles */\n::-webkit-scrollbar {\n  width: 8px;\n  height: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(var(--muted));\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(var(--muted-foreground));\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(var(--primary));\n}\n\n/* Line clamp utilities */\n.line-clamp-1 {\n  display: -webkit-box;\n  -webkit-line-clamp: 1;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n\n.line-clamp-2 {\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n\n.line-clamp-3 {\n  display: -webkit-box;\n  -webkit-line-clamp: 3;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n\n/* Animation for loading states */\n@keyframes pulse {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: .5;\n  }\n}\n\n.animate-pulse {\n  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n/* Custom focus styles */\n.focus-visible:focus-visible {\n  outline: 2px solid hsl(var(--ring));\n  outline-offset: 2px;\n}\n\n/* Typography improvements for Arabic */\nh1, h2, h3, h4, h5, h6 {\n  font-weight: 600;\n  line-height: 1.3;\n}\n\np {\n  line-height: 1.6;\n}\n\n/* Button improvements */\n.btn-primary {\n  background: linear-gradient(135deg, hsl(var(--primary)) 0%, hsl(var(--accent)) 100%);\n  color: hsl(var(--primary-foreground));\n  border: none;\n  transition: all 0.2s ease;\n}\n\n.btn-primary:hover {\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n}\n\n/* Card improvements */\n.card-hover {\n  transition: all 0.2s ease;\n}\n\n.card-hover:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);\n}\n\n/* Monaco Editor responsive */\n@media (max-width: 768px) {\n  .monaco-editor {\n    font-size: 12px;\n  }\n}\n\n/* RTL improvements */\n[dir=\"rtl\"] .flex-row-reverse {\n  flex-direction: row-reverse;\n}\n\n[dir=\"rtl\"] .space-x-reverse > * + * {\n  margin-right: var(--spacing);\n  margin-left: 0;\n}\n\n/* Custom animations */\n@keyframes fadeInUp {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.animate-fadeInUp {\n  animation: fadeInUp 0.6s ease-out;\n}\n\n@keyframes slideInLeft {\n  from {\n    opacity: 0;\n    transform: translateX(-20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n.animate-slideInLeft {\n  animation: slideInLeft 0.5s ease-out;\n}\n\n/* Loading spinner */\n@keyframes spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n.animate-spin {\n  animation: spin 1s linear infinite;\n}\n\n/* Improved backdrop blur */\n.backdrop-blur-md {\n  backdrop-filter: blur(12px);\n  -webkit-backdrop-filter: blur(12px);\n}\n\n/* Code syntax highlighting improvements */\n.hljs {\n  display: block;\n  overflow-x: auto;\n  padding: 1em;\n  color: #d4d4d4;\n  background: #1e1e1e;\n}\n\n.hljs-keyword {\n  color: #569cd6;\n  font-weight: bold;\n}\n\n.hljs-string {\n  color: #ce9178;\n}\n\n.hljs-comment {\n  color: #6a9955;\n  font-style: italic;\n}\n\n.hljs-number {\n  color: #b5cea8;\n}\n\n.hljs-function {\n  color: #dcdcaa;\n}\n\n.hljs-class {\n  color: #4ec9b0;\n}\n\n/* Responsive improvements */\n@media (max-width: 640px) {\n  .text-4xl {\n    font-size: 2.25rem;\n    line-height: 2.5rem;\n  }\n  \n  .text-6xl {\n    font-size: 3rem;\n    line-height: 1;\n  }\n  \n  .px-8 {\n    padding-left: 1rem;\n    padding-right: 1rem;\n  }\n  \n  .py-4 {\n    padding-top: 0.75rem;\n    padding-bottom: 0.75rem;\n  }\n}\n","size_bytes":10145},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport ProjectCard from \"@/components/projects/project-card\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';\nimport { Code, Eye, Edit, TrendingUp, Users, Calendar, Activity } from \"lucide-react\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function Dashboard() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"غير مصرح\",\n        description: \"تم تسجيل الخروج. جاري تسجيل الدخول مرة أخرى...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: projects, isLoading: projectsLoading } = useQuery({\n    queryKey: [\"/api/projects\"],\n    enabled: isAuthenticated,\n    retry: false,\n  });\n\n  const { data: analytics, isLoading: analyticsLoading } = useQuery({\n    queryKey: [\"/api/analytics/user\"],\n    enabled: isAuthenticated,\n    retry: false,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" aria-label=\"Loading\" data-testid=\"loading-spinner\"/>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  // Process analytics data\n  const totalProjects = projects?.length || 0;\n  const totalViews = analytics?.filter((a: any) => a.event === 'view').length || 0;\n  const totalEdits = analytics?.filter((a: any) => a.event === 'edit').length || 0;\n  const totalCreates = analytics?.filter((a: any) => a.event === 'create').length || 0;\n\n  // Chart data\n  const activityData = [\n    { name: 'إنشاء', value: totalCreates, color: '#3b82f6' },\n    { name: 'مشاهدة', value: totalViews, color: '#10b981' },\n    { name: 'تعديل', value: totalEdits, color: '#f59e0b' },\n  ];\n\n  const weeklyData = [\n    { day: 'السبت', projects: 2, views: 15 },\n    { day: 'الأحد', projects: 1, views: 8 },\n    { day: 'الاثنين', projects: 3, views: 22 },\n    { day: 'الثلاثاء', projects: 1, views: 12 },\n    { day: 'الأربعاء', projects: 2, views: 18 },\n    { day: 'الخميس', projects: 1, views: 14 },\n    { day: 'الجمعة', projects: 0, views: 6 },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"dashboard-page\">\n      <Header />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl md:text-4xl font-bold mb-4\" data-testid=\"dashboard-title\">\n            لوحة التحكم\n          </h1>\n          <p className=\"text-xl text-muted-foreground\" data-testid=\"dashboard-subtitle\">\n            تتبع أداء مشاريعك وإحصائياتك\n          </p>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card data-testid=\"stat-total-projects\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Code className=\"w-12 h-12 text-primary ml-4\" />\n                <div>\n                  <p className=\"text-3xl font-bold\" data-testid=\"stat-total-projects-value\">{totalProjects}</p>\n                  <p className=\"text-sm text-muted-foreground\" data-testid=\"stat-total-projects-label\">إجمالي المشاريع</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-total-views\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Eye className=\"w-12 h-12 text-accent ml-4\" />\n                <div>\n                  <p className=\"text-3xl font-bold\" data-testid=\"stat-total-views-value\">{totalViews}</p>\n                  <p className=\"text-sm text-muted-foreground\" data-testid=\"stat-total-views-label\">إجمالي المشاهدات</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-total-edits\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Edit className=\"w-12 h-12 text-orange-500 ml-4\" />\n                <div>\n                  <p className=\"text-3xl font-bold\" data-testid=\"stat-total-edits-value\">{totalEdits}</p>\n                  <p className=\"text-sm text-muted-foreground\" data-testid=\"stat-total-edits-label\">إجمالي التعديلات</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-user-role\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Users className=\"w-12 h-12 text-purple-500 ml-4\" />\n                <div>\n                  <p className=\"text-2xl font-bold\" data-testid=\"stat-user-role-value\">{user?.role || 'trial'}</p>\n                  <p className=\"text-sm text-muted-foreground\" data-testid=\"stat-user-role-label\">دورك في المنصة</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Tabs defaultValue=\"overview\" className=\"space-y-6\" data-testid=\"dashboard-tabs\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">نظرة عامة</TabsTrigger>\n            <TabsTrigger value=\"projects\" data-testid=\"tab-projects\">المشاريع</TabsTrigger>\n            <TabsTrigger value=\"analytics\" data-testid=\"tab-analytics\">التحليلات</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-6\" data-testid=\"content-overview\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Weekly Activity Chart */}\n              <Card data-testid=\"chart-weekly-activity\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\" data-testid=\"chart-weekly-title\">\n                    <TrendingUp className=\"w-5 h-5 ml-2\" />\n                    النشاط الأسبوعي\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <BarChart data={weeklyData}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"day\" />\n                      <YAxis />\n                      <Tooltip />\n                      <Bar dataKey=\"projects\" fill=\"#3b82f6\" name=\"مشاريع\" />\n                      <Bar dataKey=\"views\" fill=\"#10b981\" name=\"مشاهدات\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                </CardContent>\n              </Card>\n\n              {/* Activity Distribution */}\n              <Card data-testid=\"chart-activity-distribution\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\" data-testid=\"chart-distribution-title\">\n                    <Activity className=\"w-5 h-5 ml-2\" />\n                    توزيع النشاطات\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <PieChart>\n                      <Pie\n                        data={activityData}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        outerRadius={80}\n                        fill=\"#8884d8\"\n                        dataKey=\"value\"\n                        label={({ name, value }) => `${name}: ${value}`}\n                      >\n                        {activityData.map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={entry.color} />\n                        ))}\n                      </Pie>\n                      <Tooltip />\n                    </PieChart>\n                  </ResponsiveContainer>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Recent Activity */}\n            <Card data-testid=\"recent-activity\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\" data-testid=\"recent-activity-title\">\n                  <Calendar className=\"w-5 h-5 ml-2\" />\n                  النشاطات الأخيرة\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {analyticsLoading ? (\n                  <div className=\"space-y-3\">\n                    {[1, 2, 3].map((i) => (\n                      <div key={i} className=\"flex items-center space-x-reverse space-x-3 animate-pulse\" data-testid={`activity-skeleton-${i}`}>\n                        <div className=\"w-8 h-8 bg-muted rounded-full\"></div>\n                        <div className=\"flex-1\">\n                          <div className=\"h-4 bg-muted rounded mb-1\"></div>\n                          <div className=\"h-3 bg-muted rounded w-1/3\"></div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : analytics && analytics.length > 0 ? (\n                  <div className=\"space-y-3\">\n                    {analytics.slice(0, 5).map((activity: any, index: number) => (\n                      <div key={activity.id} className=\"flex items-center space-x-reverse space-x-3 p-3 rounded-lg hover:bg-muted/50\" data-testid={`activity-item-${index}`}>\n                        <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                          activity.event === 'create' ? 'bg-blue-100 text-blue-600' :\n                          activity.event === 'view' ? 'bg-green-100 text-green-600' :\n                          'bg-orange-100 text-orange-600'\n                        }`}>\n                          {activity.event === 'create' ? <Code className=\"w-4 h-4\" /> :\n                           activity.event === 'view' ? <Eye className=\"w-4 h-4\" /> :\n                           <Edit className=\"w-4 h-4\" />}\n                        </div>\n                        <div className=\"flex-1\">\n                          <p className=\"font-medium\" data-testid={`activity-description-${index}`}>\n                            {activity.event === 'create' ? 'تم إنشاء مشروع جديد' :\n                             activity.event === 'view' ? 'تم عرض مشروع' :\n                             'تم تعديل مشروع'}\n                          </p>\n                          <p className=\"text-sm text-muted-foreground\" data-testid={`activity-date-${index}`}>\n                            {new Date(activity.createdAt).toLocaleDateString('ar-EG')}\n                          </p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\" data-testid=\"no-activity\">\n                    <Activity className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-semibold mb-2\" data-testid=\"no-activity-title\">لا توجد نشاطات بعد</h3>\n                    <p className=\"text-muted-foreground\" data-testid=\"no-activity-description\">ابدأ بإنشاء مشاريع جديدة لرؤية النشاطات هنا</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"projects\" className=\"space-y-6\" data-testid=\"content-projects\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-2xl font-bold\" data-testid=\"projects-section-title\">جميع المشاريع</h2>\n              <Button onClick={() => window.location.href = '/editor'} data-testid=\"button-new-project\">\n                مشروع جديد\n              </Button>\n            </div>\n\n            {projectsLoading ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {[1, 2, 3, 4, 5, 6].map((i) => (\n                  <Card key={i} className=\"animate-pulse\" data-testid={`project-skeleton-${i}`}>\n                    <CardContent className=\"p-6\">\n                      <div className=\"h-6 bg-muted rounded mb-4\"></div>\n                      <div className=\"h-4 bg-muted rounded mb-2\"></div>\n                      <div className=\"h-4 bg-muted rounded w-2/3\"></div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : projects && projects.length > 0 ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {projects.map((project: any) => (\n                  <ProjectCard key={project.id} project={project} />\n                ))}\n              </div>\n            ) : (\n              <Card data-testid=\"no-projects\">\n                <CardContent className=\"p-8 text-center\">\n                  <Code className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\" data-testid=\"no-projects-title\">لا توجد مشاريع بعد</h3>\n                  <p className=\"text-muted-foreground mb-4\" data-testid=\"no-projects-description\">ابدأ مشروعك الأول الآن!</p>\n                  <Button onClick={() => window.location.href = '/editor'} data-testid=\"button-create-first-project\">\n                    إنشاء مشروع جديد\n                  </Button>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"analytics\" className=\"space-y-6\" data-testid=\"content-analytics\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card data-testid=\"chart-project-performance\">\n                <CardHeader>\n                  <CardTitle data-testid=\"chart-performance-title\">أداء المشاريع</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <BarChart data={weeklyData}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"day\" />\n                      <YAxis />\n                      <Tooltip />\n                      <Bar dataKey=\"projects\" fill=\"#3b82f6\" name=\"مشاريع جديدة\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                </CardContent>\n              </Card>\n\n              <Card data-testid=\"chart-engagement\">\n                <CardHeader>\n                  <CardTitle data-testid=\"chart-engagement-title\">معدل التفاعل</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <BarChart data={weeklyData}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"day\" />\n                      <YAxis />\n                      <Tooltip />\n                      <Bar dataKey=\"views\" fill=\"#10b981\" name=\"مشاهدات\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":16216},"client/src/pages/editor.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useParams } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport Header from \"@/components/layout/header\";\nimport MonacoEditor from \"@/components/editor/monaco-editor\";\nimport AIAssistant from \"@/components/editor/ai-assistant\";\nimport { Play, Save, Share, Bot, FileText, Eye } from \"lucide-react\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function Editor() {\n  const { id } = useParams();\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [projectData, setProjectData] = useState({\n    name: \"مشروع جديد\",\n    description: \"\",\n    files: { \"index.html\": \"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>مشروع جديد</title>\\n</head>\\n<body>\\n    <h1>مرحبا بك في ماركود AI</h1>\\n</body>\\n</html>\" }\n  });\n  const [activeFile, setActiveFile] = useState(\"index.html\");\n  const [isAIOpen, setIsAIOpen] = useState(false);\n  const wsRef = useRef<WebSocket | null>(null);\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"غير مصرح\",\n        description: \"تم تسجيل الخروج. جاري تسجيل الدخول مرة أخرى...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Load existing project if ID provided\n  const { data: project, isLoading: projectLoading } = useQuery({\n    queryKey: [\"/api/projects\", id],\n    enabled: !!id && isAuthenticated,\n    retry: false,\n  });\n\n  // Setup WebSocket for real-time collaboration\n  useEffect(() => {\n    if (!id || !isAuthenticated) return;\n\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    const socket = new WebSocket(wsUrl);\n\n    socket.onopen = () => {\n      socket.send(JSON.stringify({\n        type: 'join_project',\n        projectId: id,\n        userId: user?.id\n      }));\n    };\n\n    socket.onmessage = (event) => {\n      const message = JSON.parse(event.data);\n      if (message.type === 'code_change' && message.data) {\n        setProjectData(prev => ({\n          ...prev,\n          files: {\n            ...prev.files,\n            [message.data.filename]: message.data.content\n          }\n        }));\n      }\n    };\n\n    wsRef.current = socket;\n\n    return () => {\n      if (socket) {\n        socket.send(JSON.stringify({\n          type: 'leave_project',\n          projectId: id\n        }));\n        socket.close();\n      }\n    };\n  }, [id, isAuthenticated, user?.id]);\n\n  // Load project data\n  useEffect(() => {\n    if (project) {\n      setProjectData({\n        name: project.name,\n        description: project.description || \"\",\n        files: project.files || { \"index.html\": \"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>مشروع جديد</title>\\n</head>\\n<body>\\n    <h1>مرحبا بك في ماركود AI</h1>\\n</body>\\n</html>\" }\n      });\n    }\n  }, [project]);\n\n  // Save project mutation\n  const saveProjectMutation = useMutation({\n    mutationFn: async (data: any) => {\n      if (id) {\n        return await apiRequest(\"PUT\", `/api/projects/${id}`, data);\n      } else {\n        return await apiRequest(\"POST\", \"/api/projects\", data);\n      }\n    },\n    onSuccess: () => {\n      toast({\n        title: \"تم الحفظ\",\n        description: \"تم حفظ المشروع بنجاح\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"غير مصرح\",\n          description: \"تم تسجيل الخروج. جاري تسجيل الدخول مرة أخرى...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"خطأ\",\n        description: \"فشل في حفظ المشروع\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCodeChange = (filename: string, content: string) => {\n    setProjectData(prev => ({\n      ...prev,\n      files: {\n        ...prev.files,\n        [filename]: content\n      }\n    }));\n\n    // Send real-time update\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify({\n        type: 'code_change',\n        projectId: id,\n        data: { filename, content }\n      }));\n    }\n  };\n\n  const handleSave = () => {\n    saveProjectMutation.mutate(projectData);\n  };\n\n  const handleRunProject = () => {\n    const htmlContent = projectData.files[\"index.html\"] || \"\";\n    const blob = new Blob([htmlContent], { type: 'text/html' });\n    const url = URL.createObjectURL(blob);\n    window.open(url, '_blank');\n  };\n\n  const handleNewFile = () => {\n    const filename = prompt(\"اسم الملف الجديد:\");\n    if (filename && !projectData.files[filename]) {\n      const extension = filename.split('.').pop();\n      let content = \"\";\n      \n      switch (extension) {\n        case 'js':\n          content = \"// JavaScript file\\nconsole.log('Hello, World!');\";\n          break;\n        case 'css':\n          content = \"/* CSS file */\\nbody {\\n    font-family: Arial, sans-serif;\\n}\";\n          break;\n        case 'html':\n          content = \"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>New Page</title>\\n</head>\\n<body>\\n    <h1>New Page</h1>\\n</body>\\n</html>\";\n          break;\n        default:\n          content = \"\";\n      }\n\n      setProjectData(prev => ({\n        ...prev,\n        files: {\n          ...prev.files,\n          [filename]: content\n        }\n      }));\n      setActiveFile(filename);\n    }\n  };\n\n  if (isLoading || (id && projectLoading)) {\n    return (\n      <div className=\"h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" aria-label=\"Loading\" data-testid=\"loading-spinner\"/>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  const fileList = Object.keys(projectData.files);\n\n  return (\n    <div className=\"h-screen flex flex-col bg-background\" data-testid=\"editor-page\">\n      <Header />\n      \n      <div className=\"flex-1 flex overflow-hidden\">\n        {/* Sidebar */}\n        <div className=\"w-64 bg-card border-l border-border flex flex-col\" data-testid=\"file-explorer\">\n          <div className=\"p-4 border-b border-border\">\n            <Input\n              value={projectData.name}\n              onChange={(e) => setProjectData(prev => ({ ...prev, name: e.target.value }))}\n              className=\"font-semibold\"\n              data-testid=\"input-project-name\"\n            />\n          </div>\n          \n          <div className=\"flex-1 p-4\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <h4 className=\"font-semibold text-sm text-muted-foreground\" data-testid=\"text-project-files\">ملفات المشروع</h4>\n              <Button variant=\"ghost\" size=\"sm\" onClick={handleNewFile} data-testid=\"button-new-file\">\n                <FileText className=\"w-4 h-4\" />\n              </Button>\n            </div>\n            \n            <div className=\"space-y-1\">\n              {fileList.map((filename) => (\n                <div\n                  key={filename}\n                  className={`flex items-center text-sm py-2 px-3 rounded cursor-pointer transition-colors ${\n                    activeFile === filename ? 'bg-primary text-primary-foreground' : 'hover:bg-muted'\n                  }`}\n                  onClick={() => setActiveFile(filename)}\n                  data-testid={`file-${filename}`}\n                >\n                  <FileText className=\"w-4 h-4 ml-2\" />\n                  {filename}\n                </div>\n              ))}\n            </div>\n          </div>\n          \n          <div className=\"p-4 border-t border-border space-y-2\">\n            <Button onClick={handleSave} disabled={saveProjectMutation.isPending} className=\"w-full\" data-testid=\"button-save\">\n              <Save className=\"w-4 h-4 ml-2\" />\n              {saveProjectMutation.isPending ? \"جاري الحفظ...\" : \"حفظ\"}\n            </Button>\n            \n            <Button onClick={handleRunProject} variant=\"outline\" className=\"w-full\" data-testid=\"button-run\">\n              <Play className=\"w-4 h-4 ml-2\" />\n              تشغيل\n            </Button>\n            \n            <Button \n              onClick={() => setIsAIOpen(true)} \n              variant=\"secondary\" \n              className=\"w-full\"\n              data-testid=\"button-ai-assistant\"\n            >\n              <Bot className=\"w-4 h-4 ml-2\" />\n              مساعد AI\n            </Button>\n          </div>\n        </div>\n\n        {/* Main Editor Area */}\n        <div className=\"flex-1 flex flex-col\">\n          {/* Editor Header */}\n          <div className=\"bg-card px-6 py-4 border-b border-border flex items-center justify-between\">\n            <div className=\"flex items-center space-x-reverse space-x-4\">\n              <span className=\"text-sm text-muted-foreground\" data-testid=\"text-active-file\">{activeFile}</span>\n            </div>\n            <div className=\"flex items-center space-x-reverse space-x-4\">\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-share\">\n                <Share className=\"w-4 h-4 ml-1\" />\n                مشاركة\n              </Button>\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-preview\">\n                <Eye className=\"w-4 h-4 ml-1\" />\n                معاينة\n              </Button>\n            </div>\n          </div>\n\n          {/* Code Editor */}\n          <div className=\"flex-1 overflow-hidden\">\n            <MonacoEditor\n              value={projectData.files[activeFile] || \"\"}\n              onChange={(content) => handleCodeChange(activeFile, content)}\n              language={activeFile.endsWith('.js') ? 'javascript' : activeFile.endsWith('.css') ? 'css' : 'html'}\n            />\n          </div>\n        </div>\n\n        {/* AI Assistant Panel */}\n        {isAIOpen && (\n          <div className=\"w-80 bg-card border-r border-border\">\n            <AIAssistant \n              onClose={() => setIsAIOpen(false)} \n              onCodeGenerated={(code) => handleCodeChange(activeFile, code)}\n            />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":11126},"client/src/pages/home.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport ProjectCard from \"@/components/projects/project-card\";\nimport { Code, Plus, BarChart3, Users, Zap } from \"lucide-react\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function Home() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n\n  const { data: projects, isLoading: projectsLoading } = useQuery({\n    queryKey: [\"/api/projects\"],\n    retry: false,\n  });\n\n  const { data: analytics } = useQuery({\n    queryKey: [\"/api/analytics/user\"],\n    retry: false,\n  });\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"غير مصرح\",\n        description: \"تم تسجيل الخروج. جاري تسجيل الدخول مرة أخرى...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" aria-label=\"Loading\" data-testid=\"loading-spinner\"/>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  const recentProjects = projects?.slice(0, 3) || [];\n  const totalProjects = projects?.length || 0;\n  const totalViews = analytics?.filter((a: any) => a.event === 'view').length || 0;\n  const totalEdits = analytics?.filter((a: any) => a.event === 'edit').length || 0;\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"home-page\">\n      <Header />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Welcome Section */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl md:text-4xl font-bold mb-4\" data-testid=\"welcome-title\">\n            مرحباً، {user?.firstName || 'مطور'}! 👋\n          </h1>\n          <p className=\"text-xl text-muted-foreground\" data-testid=\"welcome-subtitle\">\n            ما الذي تريد بناءه اليوم؟\n          </p>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n          <Link href=\"/editor\">\n            <Card className=\"hover:scale-105 transition-transform cursor-pointer\" data-testid=\"card-new-project\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center text-primary mb-4 mx-auto\">\n                  <Plus className=\"w-6 h-6\" />\n                </div>\n                <h3 className=\"font-semibold mb-2\" data-testid=\"text-new-project\">مشروع جديد</h3>\n                <p className=\"text-sm text-muted-foreground\" data-testid=\"text-new-project-desc\">ابدأ من الصفر أو استخدم قالب</p>\n              </CardContent>\n            </Card>\n          </Link>\n\n          <Link href=\"/templates\">\n            <Card className=\"hover:scale-105 transition-transform cursor-pointer\" data-testid=\"card-templates\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-12 h-12 bg-accent/10 rounded-lg flex items-center justify-center text-accent mb-4 mx-auto\">\n                  <Code className=\"w-6 h-6\" />\n                </div>\n                <h3 className=\"font-semibold mb-2\" data-testid=\"text-templates\">تصفح القوالب</h3>\n                <p className=\"text-sm text-muted-foreground\" data-testid=\"text-templates-desc\">قوالب جاهزة لجميع أنواع المشاريع</p>\n              </CardContent>\n            </Card>\n          </Link>\n\n          <Link href=\"/dashboard\">\n            <Card className=\"hover:scale-105 transition-transform cursor-pointer\" data-testid=\"card-dashboard\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-12 h-12 bg-orange-500/10 rounded-lg flex items-center justify-center text-orange-500 mb-4 mx-auto\">\n                  <BarChart3 className=\"w-6 h-6\" />\n                </div>\n                <h3 className=\"font-semibold mb-2\" data-testid=\"text-dashboard\">لوحة التحكم</h3>\n                <p className=\"text-sm text-muted-foreground\" data-testid=\"text-dashboard-desc\">تحليلات وإحصائيات مشاريعك</p>\n              </CardContent>\n            </Card>\n          </Link>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\n          <Card data-testid=\"stat-projects\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center\">\n                <Code className=\"w-8 h-8 text-primary ml-3\" />\n                <div>\n                  <p className=\"text-2xl font-bold\" data-testid=\"stat-projects-count\">{totalProjects}</p>\n                  <p className=\"text-sm text-muted-foreground\" data-testid=\"stat-projects-label\">مشروع</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-views\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center\">\n                <Users className=\"w-8 h-8 text-accent ml-3\" />\n                <div>\n                  <p className=\"text-2xl font-bold\" data-testid=\"stat-views-count\">{totalViews}</p>\n                  <p className=\"text-sm text-muted-foreground\" data-testid=\"stat-views-label\">مشاهدة</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-edits\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center\">\n                <Zap className=\"w-8 h-8 text-orange-500 ml-3\" />\n                <div>\n                  <p className=\"text-2xl font-bold\" data-testid=\"stat-edits-count\">{totalEdits}</p>\n                  <p className=\"text-sm text-muted-foreground\" data-testid=\"stat-edits-label\">تعديل</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-role\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center\">\n                <div className=\"w-8 h-8 bg-purple-500/10 rounded-lg flex items-center justify-center text-purple-500 ml-3\">\n                  <Users className=\"w-4 h-4\" />\n                </div>\n                <div>\n                  <p className=\"text-lg font-bold\" data-testid=\"stat-role-value\">{user?.role || 'trial'}</p>\n                  <p className=\"text-sm text-muted-foreground\" data-testid=\"stat-role-label\">الدور</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Recent Projects */}\n        <div className=\"mb-8\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h2 className=\"text-2xl font-bold\" data-testid=\"recent-projects-title\">المشاريع الأخيرة</h2>\n            <Link href=\"/dashboard\">\n              <Button variant=\"outline\" data-testid=\"button-view-all\">عرض الكل</Button>\n            </Link>\n          </div>\n\n          {projectsLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              {[1, 2, 3].map((i) => (\n                <Card key={i} className=\"animate-pulse\" data-testid={`skeleton-project-${i}`}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-4 bg-muted rounded mb-4\"></div>\n                    <div className=\"h-3 bg-muted rounded mb-2\"></div>\n                    <div className=\"h-3 bg-muted rounded w-2/3\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : recentProjects.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              {recentProjects.map((project: any) => (\n                <ProjectCard key={project.id} project={project} />\n              ))}\n            </div>\n          ) : (\n            <Card data-testid=\"empty-projects\">\n              <CardContent className=\"p-8 text-center\">\n                <Code className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\" data-testid=\"empty-projects-title\">لا توجد مشاريع بعد</h3>\n                <p className=\"text-muted-foreground mb-4\" data-testid=\"empty-projects-description\">ابدأ مشروعك الأول الآن!</p>\n                <Link href=\"/editor\">\n                  <Button data-testid=\"button-create-first-project\">إنشاء مشروع جديد</Button>\n                </Link>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n\n        {/* AI Assistant Quick Access */}\n        <Card className=\"bg-gradient-to-r from-primary to-accent text-white\" data-testid=\"ai-assistant-card\">\n          <CardContent className=\"p-8\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h3 className=\"text-xl font-bold mb-2\" data-testid=\"ai-assistant-title\">مساعد ماركود AI</h3>\n                <p className=\"text-white/90\" data-testid=\"ai-assistant-description\">\n                  اسأل المساعد الذكي عن أي شيء تريد برمجته\n                </p>\n              </div>\n              <Link href=\"/editor\">\n                <Button variant=\"secondary\" size=\"lg\" className=\"text-primary\" data-testid=\"button-ask-ai\">\n                  اسأل الآن\n                </Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":10217},"client/src/pages/landing.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Code, Users, Bolt, Brain, Palette, Shield } from \"lucide-react\";\n\nexport default function Landing() {\n  const features = [\n    {\n      icon: <Brain className=\"w-6 h-6\" />,\n      title: \"إنشاء بالذكاء الاصطناعي\",\n      description: \"اكتب وصف مشروعك بالعربية أو الإنجليزية، واحصل على كود جاهز للتشغيل مع أفضل الممارسات البرمجية.\"\n    },\n    {\n      icon: <Users className=\"w-6 h-6\" />,\n      title: \"تعاون مباشر\",\n      description: \"عدّل وشارك الكود مع فريقك لحظة بلحظة مثل Google Docs، مع تتبع كامل للتغييرات.\"\n    },\n    {\n      icon: <Bolt className=\"w-6 h-6\" />,\n      title: \"تشغيل فوري\",\n      description: \"اختبر مشروعك مباشرة من المتصفح بدون إعدادات معقدة، مع نشر فوري على الإنترنت.\"\n    }\n  ];\n\n  const roles = [\n    {\n      title: \"مدير عام\",\n      icon: <Shield className=\"w-8 h-8\" />,\n      description: \"صلاحيات كاملة على جميع المشاريع والإعدادات\",\n      gradient: \"from-purple-500 to-pink-600\"\n    },\n    {\n      title: \"مطور\",\n      icon: <Code className=\"w-8 h-8\" />,\n      description: \"كتابة وتطوير الكود والميزات الجديدة\",\n      gradient: \"from-green-500 to-emerald-600\"\n    },\n    {\n      title: \"مصمم\",\n      icon: <Palette className=\"w-8 h-8\" />,\n      description: \"تصميم الواجهات والتجربة البصرية\",\n      gradient: \"from-orange-500 to-red-600\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"landing-page\">\n      <Header />\n      \n      {/* Hero Section */}\n      <section className=\"relative overflow-hidden\" data-testid=\"hero-section\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-primary/5 via-background to-accent/5\">\n          <div className=\"absolute inset-0 bg-grid-slate-100 [mask-image:linear-gradient(0deg,white,rgba(255,255,255,0.6))]\"></div>\n        </div>\n        \n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-20 pb-16\">\n          <div className=\"text-center\">\n            <div className=\"flex justify-center mb-6\">\n              <div className=\"inline-flex items-center px-4 py-2 rounded-full bg-accent/10 text-accent text-sm font-medium\">\n                <Bolt className=\"w-4 h-4 ml-2\" />\n                ثورة في بناء المواقع والتطبيقات\n              </div>\n            </div>\n            \n            <h1 className=\"text-4xl md:text-6xl font-bold text-foreground mb-6 leading-tight\" data-testid=\"hero-title\">\n              منصة <span className=\"bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">ماركود AI</span>\n              <br />\n              لبناء المواقع والتطبيقات\n            </h1>\n            \n            <p className=\"text-xl text-muted-foreground mb-10 max-w-3xl mx-auto leading-relaxed\" data-testid=\"hero-description\">\n              بيئة متكاملة ذكية تجمع بين قوة محرر الأكواد المتطور والذكاء الاصطناعي المتقدم. \n              اكتب فكرتك فقط، ودع المنصة تولّد لك الكود الجاهز بأفضل الممارسات.\n            </p>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center mb-12\">\n              <Button \n                size=\"lg\" \n                className=\"px-8 py-4 text-lg font-semibold hover:scale-105 transition-transform\"\n                onClick={() => window.location.href = '/api/login'}\n                data-testid=\"button-start-building\"\n              >\n                <Bolt className=\"w-5 h-5 ml-2\" />\n                ابدأ البناء الآن\n              </Button>\n              <Button \n                variant=\"outline\" \n                size=\"lg\" \n                className=\"px-8 py-4 text-lg font-semibold\"\n                data-testid=\"button-watch-demo\"\n              >\n                <Code className=\"w-5 h-5 ml-2\" />\n                شاهد العرض التوضيحي\n              </Button>\n            </div>\n            \n            {/* Feature highlights */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mt-16\">\n              {features.map((feature, index) => (\n                <Card key={index} className=\"bg-white/25 backdrop-blur-md border border-white/20 hover:scale-105 transition-transform\" data-testid={`feature-card-${index}`}>\n                  <CardContent className=\"p-6 text-center\">\n                    <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center text-primary text-xl mb-4 mx-auto\">\n                      {feature.icon}\n                    </div>\n                    <h3 className=\"text-lg font-semibold mb-2\" data-testid={`feature-title-${index}`}>{feature.title}</h3>\n                    <p className=\"text-muted-foreground text-sm\" data-testid={`feature-description-${index}`}>{feature.description}</p>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Grid */}\n      <section className=\"py-20\" data-testid=\"features-section\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-6\" data-testid=\"features-title\">ميزات المنصة المتطورة</h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\" data-testid=\"features-description\">\n              كل ما تحتاجه لبناء مواقع وتطبيقات احترافية بأسرع وقت وأقل جهد\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            <Card className=\"p-8 hover:scale-105 transition-transform\" data-testid=\"card-ai-generation\">\n              <CardContent className=\"p-0\">\n                <div className=\"w-16 h-16 bg-primary/10 rounded-2xl flex items-center justify-center text-primary text-2xl mb-6\">\n                  <Brain className=\"w-8 h-8\" />\n                </div>\n                <h3 className=\"text-xl font-bold mb-4\" data-testid=\"text-ai-generation-title\">إنشاء بالذكاء الاصطناعي</h3>\n                <p className=\"text-muted-foreground mb-4 leading-relaxed\" data-testid=\"text-ai-generation-description\">\n                  اكتب وصف مشروعك بالعربية أو الإنجليزية، واحصل على كود جاهز للتشغيل مع أفضل الممارسات البرمجية.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"p-8 hover:scale-105 transition-transform\" data-testid=\"card-collaboration\">\n              <CardContent className=\"p-0\">\n                <div className=\"w-16 h-16 bg-accent/10 rounded-2xl flex items-center justify-center text-accent text-2xl mb-6\">\n                  <Users className=\"w-8 h-8\" />\n                </div>\n                <h3 className=\"text-xl font-bold mb-4\" data-testid=\"text-collaboration-title\">تعاون مباشر</h3>\n                <p className=\"text-muted-foreground mb-4 leading-relaxed\" data-testid=\"text-collaboration-description\">\n                  عدّل وشارك الكود مع فريقك لحظة بلحظة مثل Google Docs، مع تتبع كامل للتغييرات.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"p-8 hover:scale-105 transition-transform\" data-testid=\"card-instant-hosting\">\n              <CardContent className=\"p-0\">\n                <div className=\"w-16 h-16 bg-orange-500/10 rounded-2xl flex items-center justify-center text-orange-500 text-2xl mb-6\">\n                  <Bolt className=\"w-8 h-8\" />\n                </div>\n                <h3 className=\"text-xl font-bold mb-4\" data-testid=\"text-hosting-title\">تشغيل مباشر</h3>\n                <p className=\"text-muted-foreground mb-4 leading-relaxed\" data-testid=\"text-hosting-description\">\n                  شغّل مشروعك أونلاين من المتصفح بدون إعدادات معقدة، مع نشر فوري على الإنترنت.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Role Management */}\n      <section className=\"py-20 bg-muted/30\" data-testid=\"roles-section\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-6\" data-testid=\"roles-title\">إدارة أدوار وصلاحيات متقدمة</h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\" data-testid=\"roles-description\">\n              نظام شامل لإدارة الفرق والمشاريع بصلاحيات مخصصة لكل دور\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {roles.map((role, index) => (\n              <div key={index} className={`bg-gradient-to-br ${role.gradient} p-6 rounded-2xl text-white text-center hover:scale-105 transition-transform`} data-testid={`role-card-${index}`}>\n                <div className=\"w-16 h-16 bg-white/20 rounded-full flex items-center justify-center mb-4 mx-auto\">\n                  {role.icon}\n                </div>\n                <h3 className=\"text-xl font-bold mb-2\" data-testid={`role-title-${index}`}>{role.title}</h3>\n                <p className=\"text-white/90 text-sm\" data-testid={`role-description-${index}`}>{role.description}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20\" data-testid=\"cta-section\">\n        <div className=\"max-w-4xl mx-auto text-center px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-6\" data-testid=\"cta-title\">\n            ابدأ رحلتك في عالم البرمجة الذكية\n          </h2>\n          <p className=\"text-xl text-muted-foreground mb-8\" data-testid=\"cta-description\">\n            انضم إلى آلاف المطورين الذين يستخدمون ماركود AI لبناء مشاريعهم\n          </p>\n          <Button \n            size=\"lg\" \n            className=\"px-12 py-4 text-lg font-semibold hover:scale-105 transition-transform\"\n            onClick={() => window.location.href = '/api/login'}\n            data-testid=\"button-get-started\"\n          >\n            ابدأ مجاناً الآن\n          </Button>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":11123},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/pricing.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Check, Crown, Code, Palette, User, CreditCard } from \"lucide-react\";\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Elements, PaymentElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { useEffect } from \"react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nif (!import.meta.env.VITE_STRIPE_PUBLIC_KEY) {\n  throw new Error('Missing required Stripe key: VITE_STRIPE_PUBLIC_KEY');\n}\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY);\n\nconst plans = [\n  {\n    id: \"free\",\n    name: \"خطة مجانية\",\n    price: \"0 جنيه\",\n    period: \"مجاناً للأبد\",\n    features: [\n      \"مشروع واحد\",\n      \"قوالب أساسية (5 قوالب)\",\n      \"مساعد AI محدود\",\n      \"استضافة أساسية\"\n    ],\n    buttonText: \"البدء مجاناً\",\n    popular: false\n  },\n  {\n    id: \"starter\",\n    name: \"المبتدئ\",\n    price: \"99 جنيه\",\n    period: \"شهرياً\",\n    features: [\n      \"5 مشاريع\",\n      \"جميع القوالب (50+ قالب)\",\n      \"مساعد AI متقدم\",\n      \"استضافة سريعة\",\n      \"دعم فني أساسي\"\n    ],\n    buttonText: \"اختر هذه الخطة\",\n    popular: false\n  },\n  {\n    id: \"professional\",\n    name: \"المحترف\",\n    price: \"299 جنيه\",\n    period: \"شهرياً\",\n    features: [\n      \"مشاريع لا محدودة\",\n      \"جميع القوالب + قوالب مميزة\",\n      \"مساعد AI بلا حدود\",\n      \"تعاون مع الفريق (10 أعضاء)\",\n      \"تحليلات متقدمة\",\n      \"دعم فني أولوي\"\n    ],\n    buttonText: \"اختر هذه الخطة\",\n    popular: true\n  },\n  {\n    id: \"enterprise\",\n    name: \"المؤسسات\",\n    price: \"تواصل معنا\",\n    period: \"حلول مخصصة\",\n    features: [\n      \"كل ميزات المحترف\",\n      \"فرق لا محدودة\",\n      \"حلول مخصصة\",\n      \"دعم فني مخصص 24/7\",\n      \"تدريب وإعداد\"\n    ],\n    buttonText: \"تواصل معنا\",\n    popular: false\n  }\n];\n\nconst SubscribeForm = ({ onSuccess }: { onSuccess: () => void }) => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    const { error } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        return_url: window.location.origin,\n      },\n    });\n\n    if (error) {\n      toast({\n        title: \"فشل في الدفع\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    } else {\n      toast({\n        title: \"تم الدفع بنجاح\",\n        description: \"تم تفعيل اشتراكك!\",\n      });\n      onSuccess();\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\" data-testid=\"payment-form\">\n      <PaymentElement />\n      <Button type=\"submit\" disabled={!stripe} className=\"w-full\" data-testid=\"button-confirm-payment\">\n        تأكيد الاشتراك\n      </Button>\n    </form>\n  );\n};\n\nexport default function Pricing() {\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const [selectedPlan, setSelectedPlan] = useState<string | null>(null);\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const [showPayment, setShowPayment] = useState(false);\n\n  const handlePlanSelect = async (planId: string) => {\n    if (!isAuthenticated) {\n      toast({\n        title: \"تسجيل الدخول مطلوب\",\n        description: \"يرجى تسجيل الدخول أولاً لاختيار خطة\",\n        variant: \"destructive\",\n      });\n      window.location.href = \"/api/login\";\n      return;\n    }\n\n    if (planId === \"free\") {\n      toast({\n        title: \"الخطة المجانية\",\n        description: \"أنت تستخدم الخطة المجانية بالفعل\",\n      });\n      return;\n    }\n\n    if (planId === \"enterprise\") {\n      toast({\n        title: \"تواصل معنا\",\n        description: \"سيتم التواصل معك قريباً\",\n      });\n      return;\n    }\n\n    try {\n      setSelectedPlan(planId);\n      const response = await apiRequest(\"POST\", \"/api/get-or-create-subscription\");\n      const data = await response.json();\n      setClientSecret(data.clientSecret);\n      setShowPayment(true);\n    } catch (error) {\n      toast({\n        title: \"خطأ\",\n        description: \"فشل في بدء عملية الاشتراك\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handlePaymentSuccess = () => {\n    setShowPayment(false);\n    setSelectedPlan(null);\n    toast({\n      title: \"مرحباً في ماركود AI!\",\n      description: \"تم تفعيل اشتراكك بنجاح\",\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"pricing-page\">\n      <Header />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-3xl md:text-4xl font-bold mb-6\" data-testid=\"pricing-title\">\n            خطط أسعار مرنة\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\" data-testid=\"pricing-subtitle\">\n            اختر الخطة المناسبة لك ولفريقك، مع إمكانية الترقية في أي وقت\n          </p>\n        </div>\n\n        {/* Payment Methods */}\n        <div className=\"flex justify-center items-center gap-6 mb-12\">\n          <span className=\"text-muted-foreground\" data-testid=\"text-payment-methods\">طرق الدفع المتاحة:</span>\n          <div className=\"flex items-center gap-4\">\n            <div className=\"w-10 h-6 bg-blue-600 rounded text-white text-xs flex items-center justify-center font-bold\">VISA</div>\n            <div className=\"w-10 h-6 bg-red-600 rounded text-white text-xs flex items-center justify-center font-bold\">MC</div>\n            <div className=\"w-12 h-6 bg-red-500 rounded text-white text-xs flex items-center justify-center font-bold\">VF</div>\n          </div>\n        </div>\n\n        {/* Pricing Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 mb-16\">\n          {plans.map((plan) => (\n            <Card \n              key={plan.id} \n              className={`relative hover:scale-105 transition-transform ${\n                plan.popular ? 'ring-2 ring-primary shadow-lg' : ''\n              }`}\n              data-testid={`plan-card-${plan.id}`}\n            >\n              {plan.popular && (\n                <div className=\"absolute top-4 right-4 bg-primary text-primary-foreground px-3 py-1 rounded-full text-xs font-bold\">\n                  الأكثر شعبية\n                </div>\n              )}\n              \n              <CardHeader className=\"text-center pb-4\">\n                <CardTitle className=\"text-2xl font-bold mb-2\" data-testid={`plan-name-${plan.id}`}>\n                  {plan.name}\n                </CardTitle>\n                <div className=\"text-4xl font-bold mb-2\" data-testid={`plan-price-${plan.id}`}>\n                  {plan.price}\n                </div>\n                <p className=\"text-muted-foreground\" data-testid={`plan-period-${plan.id}`}>\n                  {plan.period}\n                </p>\n              </CardHeader>\n              \n              <CardContent>\n                <ul className=\"space-y-4 mb-8\">\n                  {plan.features.map((feature, index) => (\n                    <li key={index} className=\"flex items-center text-sm\" data-testid={`plan-feature-${plan.id}-${index}`}>\n                      <Check className=\"w-4 h-4 text-accent ml-3 flex-shrink-0\" />\n                      {feature}\n                    </li>\n                  ))}\n                </ul>\n                \n                <Button \n                  onClick={() => handlePlanSelect(plan.id)}\n                  className={`w-full ${plan.popular ? '' : 'variant-outline'}`}\n                  variant={plan.popular ? \"default\" : \"outline\"}\n                  data-testid={`button-select-plan-${plan.id}`}\n                >\n                  {plan.buttonText}\n                </Button>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Role Comparison */}\n        <div className=\"bg-muted/30 rounded-2xl p-8 mb-16\">\n          <h2 className=\"text-2xl font-bold text-center mb-8\" data-testid=\"roles-comparison-title\">\n            مقارنة الأدوار والصلاحيات\n          </h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            <div className=\"text-center\" data-testid=\"role-admin\">\n              <div className=\"w-16 h-16 bg-gradient-to-br from-purple-500 to-pink-600 rounded-full flex items-center justify-center text-white mb-4 mx-auto\">\n                <Crown className=\"w-8 h-8\" />\n              </div>\n              <h3 className=\"font-bold mb-2\" data-testid=\"role-admin-title\">مدير عام</h3>\n              <p className=\"text-sm text-muted-foreground\" data-testid=\"role-admin-description\">\n                صلاحيات كاملة على جميع المشاريع والإعدادات\n              </p>\n            </div>\n\n            <div className=\"text-center\" data-testid=\"role-developer\">\n              <div className=\"w-16 h-16 bg-gradient-to-br from-green-500 to-emerald-600 rounded-full flex items-center justify-center text-white mb-4 mx-auto\">\n                <Code className=\"w-8 h-8\" />\n              </div>\n              <h3 className=\"font-bold mb-2\" data-testid=\"role-developer-title\">مطور</h3>\n              <p className=\"text-sm text-muted-foreground\" data-testid=\"role-developer-description\">\n                كتابة وتطوير الكود والميزات الجديدة\n              </p>\n            </div>\n\n            <div className=\"text-center\" data-testid=\"role-designer\">\n              <div className=\"w-16 h-16 bg-gradient-to-br from-orange-500 to-red-600 rounded-full flex items-center justify-center text-white mb-4 mx-auto\">\n                <Palette className=\"w-8 h-8\" />\n              </div>\n              <h3 className=\"font-bold mb-2\" data-testid=\"role-designer-title\">مصمم</h3>\n              <p className=\"text-sm text-muted-foreground\" data-testid=\"role-designer-description\">\n                تصميم الواجهات والتجربة البصرية\n              </p>\n            </div>\n\n            <div className=\"text-center\" data-testid=\"role-trial\">\n              <div className=\"w-16 h-16 bg-gradient-to-br from-gray-500 to-slate-600 rounded-full flex items-center justify-center text-white mb-4 mx-auto\">\n                <User className=\"w-8 h-8\" />\n              </div>\n              <h3 className=\"font-bold mb-2\" data-testid=\"role-trial-title\">مستخدم تجريبي</h3>\n              <p className=\"text-sm text-muted-foreground\" data-testid=\"role-trial-description\">\n                تجربة محدودة لاستكشاف المنصة\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Payment Modal */}\n        {showPayment && clientSecret && (\n          <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\" data-testid=\"payment-modal\">\n            <Card className=\"w-full max-w-md mx-4\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\" data-testid=\"payment-modal-title\">\n                  <CreditCard className=\"w-5 h-5 ml-2\" />\n                  إتمام الاشتراك\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Elements stripe={stripePromise} options={{ clientSecret }}>\n                  <SubscribeForm onSuccess={handlePaymentSuccess} />\n                </Elements>\n                \n                <Button\n                  variant=\"outline\"\n                  onClick={() => setShowPayment(false)}\n                  className=\"w-full mt-4\"\n                  data-testid=\"button-cancel-payment\"\n                >\n                  إلغاء\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":12687},"client/src/pages/templates.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport TemplateCard from \"@/components/templates/template-card\";\nimport { Search, Filter } from \"lucide-react\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useEffect } from \"react\";\n\nconst categories = [\n  { id: \"all\", name: \"الكل\" },\n  { id: \"business\", name: \"مواقع الشركات\" },\n  { id: \"ecommerce\", name: \"متاجر إلكترونية\" },\n  { id: \"blog\", name: \"مدونات\" },\n  { id: \"dashboard\", name: \"لوحات تحكم\" },\n  { id: \"portfolio\", name: \"معرض أعمال\" },\n];\n\nexport default function Templates() {\n  const { isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"غير مصرح\",\n        description: \"تم تسجيل الخروج. جاري تسجيل الدخول مرة أخرى...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: templates, isLoading: templatesLoading } = useQuery({\n    queryKey: [\"/api/templates\", selectedCategory === \"all\" ? undefined : selectedCategory],\n    enabled: isAuthenticated,\n    retry: false,\n  });\n\n  const useTemplateMutation = useMutation({\n    mutationFn: async (templateId: string) => {\n      const template = await apiRequest(\"GET\", `/api/templates/${templateId}`);\n      const templateData = await template.json();\n      \n      return await apiRequest(\"POST\", \"/api/projects\", {\n        name: `${templateData.name} - نسخة`,\n        description: templateData.description,\n        templateId: templateId,\n        files: templateData.files\n      });\n    },\n    onSuccess: (response) => {\n      toast({\n        title: \"تم إنشاء المشروع\",\n        description: \"تم إنشاء مشروع جديد من القالب بنجاح\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      // Navigate to editor\n      window.location.href = `/editor`;\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"غير مصرح\",\n          description: \"تم تسجيل الخروج. جاري تسجيل الدخول مرة أخرى...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"خطأ\",\n        description: \"فشل في استخدام القالب\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" aria-label=\"Loading\" data-testid=\"loading-spinner\"/>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  const filteredTemplates = templates?.filter((template: any) =>\n    template.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    template.description.toLowerCase().includes(searchQuery.toLowerCase())\n  ) || [];\n\n  return (\n    <div className=\"min-h-screen bg-background\" data-testid=\"templates-page\">\n      <Header />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-3xl md:text-4xl font-bold mb-6\" data-testid=\"templates-title\">\n            معرض القوالب الاحترافية\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\" data-testid=\"templates-subtitle\">\n            قوالب جاهزة ومصممة باحترافية لجميع أنواع المشاريع\n          </p>\n        </div>\n\n        {/* Search and Filters */}\n        <div className=\"mb-8\">\n          <div className=\"flex flex-col md:flex-row gap-4 items-center justify-between\">\n            <div className=\"relative flex-1 max-w-md\">\n              <Search className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n              <Input\n                placeholder=\"ابحث في القوالب...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pr-10\"\n                data-testid=\"input-search-templates\"\n              />\n            </div>\n            \n            <div className=\"flex flex-wrap gap-2\">\n              {categories.map((category) => (\n                <Button\n                  key={category.id}\n                  variant={selectedCategory === category.id ? \"default\" : \"outline\"}\n                  onClick={() => setSelectedCategory(category.id)}\n                  data-testid={`button-category-${category.id}`}\n                >\n                  {category.name}\n                </Button>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Templates Grid */}\n        {templatesLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[1, 2, 3, 4, 5, 6].map((i) => (\n              <div key={i} className=\"bg-card rounded-2xl overflow-hidden animate-pulse\" data-testid={`template-skeleton-${i}`}>\n                <div className=\"aspect-video bg-muted\"></div>\n                <div className=\"p-6\">\n                  <div className=\"h-6 bg-muted rounded mb-2\"></div>\n                  <div className=\"h-4 bg-muted rounded mb-4\"></div>\n                  <div className=\"h-10 bg-muted rounded\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : filteredTemplates.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredTemplates.map((template: any) => (\n              <TemplateCard\n                key={template.id}\n                template={template}\n                onUse={() => useTemplateMutation.mutate(template.id)}\n                isLoading={useTemplateMutation.isPending}\n              />\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-16\">\n            <Filter className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\" data-testid=\"no-templates-title\">\n              لا توجد قوالب متطابقة\n            </h3>\n            <p className=\"text-muted-foreground\" data-testid=\"no-templates-description\">\n              حاول تغيير مصطلحات البحث أو الفئة المحددة\n            </p>\n          </div>\n        )}\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":7377},"client/src/components/editor/ai-assistant.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Bot, Send, X, Code, Lightbulb, Bug, Sparkles } from \"lucide-react\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\ninterface Message {\n  id: string;\n  type: 'user' | 'assistant';\n  content: string;\n  timestamp: Date;\n}\n\ninterface AIAssistantProps {\n  onClose: () => void;\n  onCodeGenerated?: (code: string) => void;\n}\n\nexport default function AIAssistant({ onClose, onCodeGenerated }: AIAssistantProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: '1',\n      type: 'assistant',\n      content: 'مرحباً! أنا مساعد ماركود AI. كيف يمكنني مساعدتك في البرمجة اليوم؟',\n      timestamp: new Date()\n    }\n  ]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [codeDescription, setCodeDescription] = useState('');\n  const [selectedLanguage, setSelectedLanguage] = useState('javascript');\n  const [selectedFramework, setSelectedFramework] = useState('react');\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  // Generate code mutation\n  const generateCodeMutation = useMutation({\n    mutationFn: async (data: { description: string; language: string; framework: string; features: string[] }) => {\n      return await apiRequest(\"POST\", \"/api/ai/generate\", data);\n    },\n    onSuccess: async (response) => {\n      const result = await response.json();\n      const newMessage: Message = {\n        id: Date.now().toString(),\n        type: 'assistant',\n        content: `تم إنشاء الكود بنجاح! إليك ما تم إنشاؤه:\\n\\n**الوصف:** ${result.description}\\n\\n**تعليمات الإعداد:** ${result.setup_instructions}`,\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, newMessage]);\n      \n      // Extract main file content for editor\n      const mainFile = result.files['index.html'] || result.files['App.tsx'] || result.files['main.js'] || Object.values(result.files)[0];\n      if (mainFile && onCodeGenerated) {\n        onCodeGenerated(mainFile as string);\n      }\n      \n      toast({\n        title: \"تم إنشاء الكود\",\n        description: \"تم إنشاء الكود وإضافته للمحرر بنجاح\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"غير مصرح\",\n          description: \"تم تسجيل الخروج. جاري تسجيل الدخول مرة أخرى...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      \n      const newMessage: Message = {\n        id: Date.now().toString(),\n        type: 'assistant',\n        content: 'عذراً، حدث خطأ في إنشاء الكود. يرجى المحاولة مرة أخرى.',\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, newMessage]);\n      \n      toast({\n        title: \"خطأ\",\n        description: \"فشل في إنشاء الكود\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Improve code mutation\n  const improveCodeMutation = useMutation({\n    mutationFn: async (data: { code: string; issue: string }) => {\n      return await apiRequest(\"POST\", \"/api/ai/improve\", data);\n    },\n    onSuccess: async (response) => {\n      const result = await response.json();\n      const newMessage: Message = {\n        id: Date.now().toString(),\n        type: 'assistant',\n        content: `إليك اقتراح لتحسين الكود:\\n\\n${result.suggestion}`,\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, newMessage]);\n    },\n    onError: (error) => {\n      const newMessage: Message = {\n        id: Date.now().toString(),\n        type: 'assistant',\n        content: 'عذراً، لم أتمكن من تحليل الكود. يرجى المحاولة مرة أخرى.',\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, newMessage]);\n    },\n  });\n\n  const handleSendMessage = () => {\n    if (!inputMessage.trim()) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      type: 'user',\n      content: inputMessage,\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setInputMessage('');\n\n    // Simulate AI response for general questions\n    setTimeout(() => {\n      const responses = [\n        'شكراً لسؤالك! يمكنني مساعدتك في البرمجة والتطوير. استخدم تبويب \"إنشاء كود\" لإنشاء كود جديد.',\n        'أنا هنا للمساعدة! يمكنني إنشاء كود، تحسين الكود الموجود، وإصلاح الأخطاء.',\n        'ممتاز! استخدم الأدوات المختلفة في الأسفل لمساعدتك في مشروعك.'\n      ];\n      \n      const aiResponse: Message = {\n        id: (Date.now() + 1).toString(),\n        type: 'assistant',\n        content: responses[Math.floor(Math.random() * responses.length)],\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, aiResponse]);\n    }, 1000);\n  };\n\n  const handleGenerateCode = () => {\n    if (!codeDescription.trim()) {\n      toast({\n        title: \"يرجى إدخال وصف المشروع\",\n        description: \"اكتب وصفاً واضحاً لما تريد إنشاءه\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      type: 'user',\n      content: `أريد إنشاء: ${codeDescription} (${selectedLanguage} - ${selectedFramework})`,\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setCodeDescription('');\n\n    generateCodeMutation.mutate({\n      description: codeDescription,\n      language: selectedLanguage,\n      framework: selectedFramework,\n      features: []\n    });\n  };\n\n  const quickActions = [\n    {\n      title: \"إنشاء صفحة ويب\",\n      description: \"صفحة HTML بسيطة وجميلة\",\n      icon: <Code className=\"w-4 h-4\" />,\n      action: () => setCodeDescription(\"صفحة ويب بسيطة وجميلة مع تصميم حديث\")\n    },\n    {\n      title: \"تطبيق React\",\n      description: \"تطبيق React متكامل\",\n      icon: <Sparkles className=\"w-4 h-4\" />,\n      action: () => setCodeDescription(\"تطبيق React متكامل مع مكونات وحالة\")\n    },\n    {\n      title: \"API باستخدام Node.js\",\n      description: \"خدمة API RESTful\",\n      icon: <Bot className=\"w-4 h-4\" />,\n      action: () => setCodeDescription(\"API RESTful باستخدام Node.js و Express\")\n    }\n  ];\n\n  return (\n    <Card className=\"h-full flex flex-col\" data-testid=\"ai-assistant\">\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-4\">\n        <CardTitle className=\"flex items-center text-lg\" data-testid=\"ai-assistant-title\">\n          <Bot className=\"w-5 h-5 ml-2 text-primary\" />\n          مساعد ماركود AI\n        </CardTitle>\n        <Button variant=\"ghost\" size=\"sm\" onClick={onClose} data-testid=\"button-close-ai\">\n          <X className=\"w-4 h-4\" />\n        </Button>\n      </CardHeader>\n\n      <CardContent className=\"flex-1 flex flex-col space-y-4 p-4\">\n        <Tabs defaultValue=\"chat\" className=\"flex-1 flex flex-col\" data-testid=\"ai-assistant-tabs\">\n          <TabsList className=\"grid w-full grid-cols-3 mb-4\">\n            <TabsTrigger value=\"chat\" data-testid=\"tab-chat\">محادثة</TabsTrigger>\n            <TabsTrigger value=\"generate\" data-testid=\"tab-generate\">إنشاء كود</TabsTrigger>\n            <TabsTrigger value=\"improve\" data-testid=\"tab-improve\">تحسين</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"chat\" className=\"flex-1 flex flex-col space-y-4\" data-testid=\"content-chat\">\n            {/* Messages */}\n            <ScrollArea className=\"flex-1 pr-4\" data-testid=\"chat-messages\">\n              <div className=\"space-y-4\">\n                {messages.map((message) => (\n                  <div\n                    key={message.id}\n                    className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}\n                    data-testid={`message-${message.id}`}\n                  >\n                    <div\n                      className={`max-w-[80%] p-3 rounded-lg text-sm ${\n                        message.type === 'user'\n                          ? 'bg-primary text-primary-foreground'\n                          : 'bg-muted text-muted-foreground'\n                      }`}\n                    >\n                      <div className=\"whitespace-pre-wrap\" data-testid={`message-content-${message.id}`}>\n                        {message.content}\n                      </div>\n                      <div className=\"text-xs mt-1 opacity-70\" data-testid={`message-time-${message.id}`}>\n                        {message.timestamp.toLocaleTimeString('ar-EG')}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n                <div ref={messagesEndRef} />\n              </div>\n            </ScrollArea>\n\n            {/* Quick Actions */}\n            <div className=\"space-y-2\">\n              <p className=\"text-xs text-muted-foreground\" data-testid=\"quick-actions-title\">اقتراحات سريعة:</p>\n              <div className=\"grid grid-cols-1 gap-2\">\n                {quickActions.map((action, index) => (\n                  <Button\n                    key={index}\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={action.action}\n                    className=\"justify-start h-auto p-3\"\n                    data-testid={`quick-action-${index}`}\n                  >\n                    <div className=\"flex items-start space-x-reverse space-x-3\">\n                      {action.icon}\n                      <div className=\"text-right\">\n                        <div className=\"font-medium text-xs\" data-testid={`quick-action-title-${index}`}>\n                          {action.title}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\" data-testid={`quick-action-desc-${index}`}>\n                          {action.description}\n                        </div>\n                      </div>\n                    </div>\n                  </Button>\n                ))}\n              </div>\n            </div>\n\n            {/* Input */}\n            <div className=\"flex gap-2\">\n              <Input\n                value={inputMessage}\n                onChange={(e) => setInputMessage(e.target.value)}\n                placeholder=\"اسأل مساعد ماركود AI...\"\n                onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n                data-testid=\"input-chat-message\"\n              />\n              <Button onClick={handleSendMessage} size=\"sm\" data-testid=\"button-send-message\">\n                <Send className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"generate\" className=\"flex-1 flex flex-col space-y-4\" data-testid=\"content-generate\">\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\" data-testid=\"label-project-description\">\n                  وصف المشروع\n                </label>\n                <Textarea\n                  value={codeDescription}\n                  onChange={(e) => setCodeDescription(e.target.value)}\n                  placeholder=\"مثال: أريد إنشاء موقع شركة بتصميم حديث يحتوي على صفحة رئيسية، من نحن، وتواصل معنا...\"\n                  rows={4}\n                  data-testid=\"textarea-code-description\"\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-3\">\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\" data-testid=\"label-language\">اللغة</label>\n                  <select\n                    value={selectedLanguage}\n                    onChange={(e) => setSelectedLanguage(e.target.value)}\n                    className=\"w-full p-2 border border-border rounded-md bg-background\"\n                    data-testid=\"select-language\"\n                  >\n                    <option value=\"javascript\">JavaScript</option>\n                    <option value=\"typescript\">TypeScript</option>\n                    <option value=\"python\">Python</option>\n                    <option value=\"html\">HTML</option>\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\" data-testid=\"label-framework\">الإطار</label>\n                  <select\n                    value={selectedFramework}\n                    onChange={(e) => setSelectedFramework(e.target.value)}\n                    className=\"w-full p-2 border border-border rounded-md bg-background\"\n                    data-testid=\"select-framework\"\n                  >\n                    <option value=\"react\">React</option>\n                    <option value=\"vue\">Vue.js</option>\n                    <option value=\"angular\">Angular</option>\n                    <option value=\"vanilla\">Vanilla JS</option>\n                    <option value=\"express\">Express.js</option>\n                  </select>\n                </div>\n              </div>\n\n              <Button\n                onClick={handleGenerateCode}\n                disabled={generateCodeMutation.isPending}\n                className=\"w-full\"\n                data-testid=\"button-generate-code\"\n              >\n                <Sparkles className=\"w-4 h-4 ml-2\" />\n                {generateCodeMutation.isPending ? \"جاري الإنشاء...\" : \"إنشاء الكود\"}\n              </Button>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"improve\" className=\"flex-1 flex flex-col space-y-4\" data-testid=\"content-improve\">\n            <div className=\"text-center py-8\">\n              <Lightbulb className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\" data-testid=\"improve-title\">تحسين الكود</h3>\n              <p className=\"text-sm text-muted-foreground mb-4\" data-testid=\"improve-description\">\n                قم بلصق الكود الذي تريد تحسينه واذكر المشكلة أو التحسين المطلوب\n              </p>\n              <Badge variant=\"secondary\" data-testid=\"improve-badge\">قريباً</Badge>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":15630},"client/src/components/editor/monaco-editor.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport * as monaco from \"monaco-editor\";\n\ninterface MonacoEditorProps {\n  value: string;\n  onChange: (value: string) => void;\n  language: string;\n  readOnly?: boolean;\n  theme?: string;\n}\n\nexport default function MonacoEditor({\n  value,\n  onChange,\n  language,\n  readOnly = false,\n  theme = \"vs-dark\"\n}: MonacoEditorProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const editorRef = useRef<monaco.editor.IStandaloneCodeEditor | null>(null);\n\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    // Configure Monaco Editor\n    monaco.editor.defineTheme('markode-dark', {\n      base: 'vs-dark',\n      inherit: true,\n      rules: [\n        { token: 'comment', foreground: '6a9955', fontStyle: 'italic' },\n        { token: 'keyword', foreground: '569cd6' },\n        { token: 'string', foreground: 'ce9178' },\n        { token: 'number', foreground: 'b5cea8' },\n        { token: 'type', foreground: '4ec9b0' },\n        { token: 'class', foreground: '4ec9b0' },\n        { token: 'function', foreground: 'dcdcaa' },\n      ],\n      colors: {\n        'editor.background': '#1e1e1e',\n        'editor.foreground': '#d4d4d4',\n        'editorLineNumber.foreground': '#858585',\n        'editorCursor.foreground': '#ffffff',\n        'editor.selectionBackground': '#264f78',\n        'editor.lineHighlightBackground': '#2d2d30',\n      }\n    });\n\n    // Create editor\n    const editor = monaco.editor.create(containerRef.current, {\n      value: value,\n      language: language,\n      theme: theme === 'vs-dark' ? 'markode-dark' : theme,\n      readOnly: readOnly,\n      automaticLayout: true,\n      minimap: {\n        enabled: true,\n        scale: 1,\n      },\n      scrollBeyondLastLine: false,\n      fontSize: 14,\n      lineNumbers: 'on',\n      folding: true,\n      wordWrap: 'on',\n      contextmenu: true,\n      formatOnPaste: true,\n      formatOnType: true,\n      tabSize: 2,\n      insertSpaces: true,\n      renderWhitespace: 'selection',\n      bracketPairColorization: {\n        enabled: true,\n      },\n      suggest: {\n        enabled: true,\n        showKeywords: true,\n        showSnippets: true,\n        showFunctions: true,\n        showConstructors: true,\n        showFields: true,\n        showVariables: true,\n        showClasses: true,\n        showStructs: true,\n        showInterfaces: true,\n        showModules: true,\n        showProperties: true,\n        showEvents: true,\n        showOperators: true,\n        showUnits: true,\n        showValues: true,\n        showConstants: true,\n        showEnums: true,\n        showEnumMembers: true,\n        showColors: true,\n        showFiles: true,\n        showReferences: true,\n        showFolders: true,\n        showTypeParameters: true,\n        showUsers: true,\n        showIssues: true,\n      },\n    });\n\n    editorRef.current = editor;\n\n    // Set up change listener\n    const disposable = editor.onDidChangeModelContent(() => {\n      const newValue = editor.getValue();\n      onChange(newValue);\n    });\n\n    return () => {\n      disposable.dispose();\n      editor.dispose();\n    };\n  }, [language, readOnly, theme]);\n\n  // Update editor value when prop changes\n  useEffect(() => {\n    if (editorRef.current && value !== editorRef.current.getValue()) {\n      editorRef.current.setValue(value);\n    }\n  }, [value]);\n\n  return (\n    <div \n      ref={containerRef} \n      className=\"w-full h-full min-h-[400px] border border-border rounded-lg overflow-hidden\"\n      data-testid=\"monaco-editor\"\n    />\n  );\n}\n","size_bytes":3513},"client/src/components/layout/footer.tsx":{"content":"import { Link } from \"wouter\";\nimport { Code, Twitter, Linkedin, Github } from \"lucide-react\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-slate-900 text-white py-16\" data-testid=\"footer\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n          {/* Brand Section */}\n          <div className=\"lg:col-span-1\">\n            <div className=\"flex items-center mb-6\">\n              <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center text-primary-foreground font-bold text-lg ml-3\">\n                <Code className=\"w-5 h-5\" />\n              </div>\n              <span className=\"text-2xl font-bold\" data-testid=\"footer-logo\">ماركود AI</span>\n            </div>\n            <p className=\"text-slate-300 leading-relaxed mb-6\" data-testid=\"footer-description\">\n              منصة متكاملة لبناء المواقع والتطبيقات بالذكاء الاصطناعي. \n              ابدأ مشروعك القادم بأسرع وأذكى الطرق.\n            </p>\n            <div className=\"flex space-x-reverse space-x-4\">\n              <a href=\"#\" className=\"w-10 h-10 bg-slate-800 hover:bg-primary rounded-lg flex items-center justify-center transition-colors\" data-testid=\"social-twitter\">\n                <Twitter className=\"w-5 h-5\" />\n              </a>\n              <a href=\"#\" className=\"w-10 h-10 bg-slate-800 hover:bg-primary rounded-lg flex items-center justify-center transition-colors\" data-testid=\"social-linkedin\">\n                <Linkedin className=\"w-5 h-5\" />\n              </a>\n              <a href=\"#\" className=\"w-10 h-10 bg-slate-800 hover:bg-primary rounded-lg flex items-center justify-center transition-colors\" data-testid=\"social-github\">\n                <Github className=\"w-5 h-5\" />\n              </a>\n            </div>\n          </div>\n          \n          {/* Product Links */}\n          <div data-testid=\"footer-product-links\">\n            <h4 className=\"text-lg font-semibold mb-6\" data-testid=\"footer-product-title\">المنتج</h4>\n            <ul className=\"space-y-4\">\n              <li><Link href=\"#\"><a className=\"text-slate-300 hover:text-white transition-colors\" data-testid=\"footer-features\">الميزات</a></Link></li>\n              <li><Link href=\"/templates\"><a className=\"text-slate-300 hover:text-white transition-colors\" data-testid=\"footer-templates\">القوالب</a></Link></li>\n              <li><Link href=\"#\"><a className=\"text-slate-300 hover:text-white transition-colors\" data-testid=\"footer-ai-assistant\">مساعد AI</a></Link></li>\n              <li><Link href=\"#\"><a className=\"text-slate-300 hover:text-white transition-colors\" data-testid=\"footer-updates\">التحديثات</a></Link></li>\n              <li><Link href=\"/pricing\"><a className=\"text-slate-300 hover:text-white transition-colors\" data-testid=\"footer-pricing\">الأسعار</a></Link></li>\n            </ul>\n          </div>\n          \n          {/* Resources Links */}\n          <div data-testid=\"footer-resources-links\">\n            <h4 className=\"text-lg font-semibold mb-6\" data-testid=\"footer-resources-title\">الموارد</h4>\n            <ul className=\"space-y-4\">\n              <li><a href=\"#\" className=\"text-slate-300 hover:text-white transition-colors\" data-testid=\"footer-docs\">التوثيق</a></li>\n              <li><a href=\"#\" className=\"text-slate-300 hover:text-white transition-colors\" data-testid=\"footer-tutorials\">دروس تعليمية</a></li>\n              <li><a href=\"#\" className=\"text-slate-300 hover:text-white transition-colors\" data-testid=\"footer-community\">مجتمع المطورين</a></li>\n              <li><a href=\"#\" className=\"text-slate-300 hover:text-white transition-colors\" data-testid=\"footer-blog\">المدونة</a></li>\n              <li><a href=\"#\" className=\"text-slate-300 hover:text-white transition-colors\" data-testid=\"footer-support\">الدعم الفني</a></li>\n            </ul>\n          </div>\n          \n          {/* Company Links */}\n          <div data-testid=\"footer-company-links\">\n            <h4 className=\"text-lg font-semibold mb-6\" data-testid=\"footer-company-title\">الشركة</h4>\n            <ul className=\"space-y-4\">\n              <li><a href=\"#\" className=\"text-slate-300 hover:text-white transition-colors\" data-testid=\"footer-about\">من نحن</a></li>\n              <li><a href=\"#\" className=\"text-slate-300 hover:text-white transition-colors\" data-testid=\"footer-careers\">الوظائف</a></li>\n              <li><a href=\"#\" className=\"text-slate-300 hover:text-white transition-colors\" data-testid=\"footer-contact\">اتصل بنا</a></li>\n              <li><a href=\"#\" className=\"text-slate-300 hover:text-white transition-colors\" data-testid=\"footer-privacy\">سياسة الخصوصية</a></li>\n              <li><a href=\"#\" className=\"text-slate-300 hover:text-white transition-colors\" data-testid=\"footer-terms\">شروط الاستخدام</a></li>\n            </ul>\n          </div>\n        </div>\n        \n        <div className=\"border-t border-slate-800 mt-12 pt-8 flex flex-col md:flex-row justify-between items-center\">\n          <p className=\"text-slate-300 text-sm\" data-testid=\"footer-copyright\">\n            © 2024 ماركود AI. جميع الحقوق محفوظة.\n          </p>\n          <p className=\"text-slate-300 text-sm mt-4 md:mt-0\" data-testid=\"footer-made-with-love\">\n            صُنع بـ <span className=\"text-red-500\">❤️</span> للمطورين العرب\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":5663},"client/src/components/layout/header.tsx":{"content":"import { Link } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Code, User, LogOut, Settings, Home } from \"lucide-react\";\n\nexport default function Header() {\n  const { user, isAuthenticated } = useAuth();\n\n  return (\n    <nav className=\"bg-card border-b border-border sticky top-0 z-50 backdrop-blur-md bg-card/80\" data-testid=\"header\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo */}\n          <Link href=\"/\">\n            <div className=\"flex items-center cursor-pointer\" data-testid=\"logo\">\n              <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center text-primary-foreground font-bold text-lg ml-3\">\n                <Code className=\"w-5 h-5\" />\n              </div>\n              <span className=\"text-xl font-bold text-foreground\" data-testid=\"logo-text\">ماركود AI</span>\n            </div>\n          </Link>\n          \n          {/* Navigation Links */}\n          {isAuthenticated && (\n            <div className=\"hidden md:flex items-center space-x-reverse space-x-6\">\n              <Link href=\"/\">\n                <a className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"nav-home\">\n                  الرئيسية\n                </a>\n              </Link>\n              <Link href=\"/templates\">\n                <a className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"nav-templates\">\n                  القوالب\n                </a>\n              </Link>\n              <Link href=\"/dashboard\">\n                <a className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"nav-dashboard\">\n                  لوحة التحكم\n                </a>\n              </Link>\n              <Link href=\"/pricing\">\n                <a className=\"text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"nav-pricing\">\n                  الأسعار\n                </a>\n              </Link>\n            </div>\n          )}\n          \n          {/* User Menu */}\n          <div className=\"flex items-center space-x-reverse space-x-4\">\n            {isAuthenticated ? (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" className=\"relative h-10 w-10 rounded-full\" data-testid=\"user-menu-trigger\">\n                    <Avatar className=\"h-10 w-10\">\n                      <AvatarImage src={user?.profileImageUrl || \"\"} alt={user?.firstName || \"\"} />\n                      <AvatarFallback>\n                        {user?.firstName?.charAt(0) || user?.email?.charAt(0) || 'U'}\n                      </AvatarFallback>\n                    </Avatar>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount data-testid=\"user-menu\">\n                  <div className=\"flex items-center justify-start gap-2 p-2\">\n                    <div className=\"flex flex-col space-y-1 leading-none\">\n                      <p className=\"font-medium\" data-testid=\"user-name\">\n                        {user?.firstName && user?.lastName \n                          ? `${user.firstName} ${user.lastName}`\n                          : user?.email || 'مستخدم'}\n                      </p>\n                      <p className=\"w-[200px] truncate text-sm text-muted-foreground\" data-testid=\"user-email\">\n                        {user?.email}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\" data-testid=\"user-role\">\n                        الدور: {user?.role || 'trial'}\n                      </p>\n                    </div>\n                  </div>\n                  <DropdownMenuItem asChild>\n                    <Link href=\"/\">\n                      <Home className=\"ml-2 h-4 w-4\" />\n                      <span data-testid=\"menu-home\">الرئيسية</span>\n                    </Link>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem asChild>\n                    <Link href=\"/dashboard\">\n                      <User className=\"ml-2 h-4 w-4\" />\n                      <span data-testid=\"menu-profile\">الملف الشخصي</span>\n                    </Link>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem asChild>\n                    <Link href=\"/pricing\">\n                      <Settings className=\"ml-2 h-4 w-4\" />\n                      <span data-testid=\"menu-settings\">الإعدادات</span>\n                    </Link>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem\n                    onClick={() => window.location.href = '/api/logout'}\n                    data-testid=\"menu-logout\"\n                  >\n                    <LogOut className=\"ml-2 h-4 w-4\" />\n                    <span>تسجيل الخروج</span>\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            ) : (\n              <>\n                <Button\n                  variant=\"ghost\"\n                  onClick={() => window.location.href = '/api/login'}\n                  data-testid=\"button-login\"\n                >\n                  تسجيل الدخول\n                </Button>\n                <Button\n                  onClick={() => window.location.href = '/api/login'}\n                  data-testid=\"button-signup\"\n                >\n                  ابدأ مجاناً\n                </Button>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":5947},"client/src/components/projects/project-card.tsx":{"content":"import { Link } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Code, Calendar, Globe, MoreHorizontal, Edit, Trash2, Share } from \"lucide-react\";\n\ninterface Project {\n  id: string;\n  name: string;\n  description?: string;\n  userId: string;\n  templateId?: string;\n  files: Record<string, string>;\n  isPublic: boolean;\n  deployUrl?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface ProjectCardProps {\n  project: Project;\n  onDelete?: (id: string) => void;\n}\n\nexport default function ProjectCard({ project, onDelete }: ProjectCardProps) {\n  const getProjectType = () => {\n    const files = Object.keys(project.files);\n    if (files.some(f => f.endsWith('.tsx') || f.endsWith('.jsx'))) {\n      return { type: 'React', color: 'bg-blue-500' };\n    } else if (files.some(f => f.endsWith('.vue'))) {\n      return { type: 'Vue.js', color: 'bg-green-500' };\n    } else if (files.some(f => f.endsWith('.html'))) {\n      return { type: 'HTML', color: 'bg-orange-500' };\n    } else if (files.some(f => f.endsWith('.js'))) {\n      return { type: 'JavaScript', color: 'bg-yellow-500' };\n    }\n    return { type: 'مشروع', color: 'bg-gray-500' };\n  };\n\n  const projectType = getProjectType();\n  const lastUpdated = new Date(project.updatedAt);\n  const isRecentlyUpdated = Date.now() - lastUpdated.getTime() < 24 * 60 * 60 * 1000; // Last 24 hours\n\n  const handleDelete = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (onDelete && confirm('هل أنت متأكد من حذف هذا المشروع؟')) {\n      onDelete(project.id);\n    }\n  };\n\n  const handleShare = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    navigator.clipboard.writeText(`${window.location.origin}/editor/${project.id}`);\n    // You might want to show a toast notification here\n  };\n\n  return (\n    <Card className=\"hover:scale-105 transition-transform group border border-border\" data-testid={`project-card-${project.id}`}>\n      <CardContent className=\"p-0\">\n        <Link href={`/editor/${project.id}`}>\n          <div className=\"cursor-pointer\">\n            {/* Project Header */}\n            <div className=\"p-4 border-b border-border\">\n              <div className=\"flex justify-between items-start mb-3\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <div className={`w-3 h-3 ${projectType.color} rounded-full`} data-testid={`project-type-indicator-${project.id}`}></div>\n                    <Badge variant=\"secondary\" className=\"text-xs\" data-testid={`project-type-badge-${project.id}`}>\n                      {projectType.type}\n                    </Badge>\n                    {isRecentlyUpdated && (\n                      <Badge variant=\"default\" className=\"text-xs\" data-testid={`project-recent-badge-${project.id}`}>\n                        جديد\n                      </Badge>\n                    )}\n                  </div>\n                  <h3 className=\"text-lg font-bold mb-1 line-clamp-2\" data-testid={`project-name-${project.id}`}>\n                    {project.name}\n                  </h3>\n                  {project.description && (\n                    <p className=\"text-sm text-muted-foreground line-clamp-2\" data-testid={`project-description-${project.id}`}>\n                      {project.description}\n                    </p>\n                  )}\n                </div>\n                \n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild onClick={(e) => e.stopPropagation()}>\n                    <Button variant=\"ghost\" size=\"sm\" className=\"opacity-0 group-hover:opacity-100 transition-opacity\" data-testid={`project-menu-${project.id}`}>\n                      <MoreHorizontal className=\"w-4 h-4\" />\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\" data-testid={`project-menu-content-${project.id}`}>\n                    <DropdownMenuItem asChild>\n                      <Link href={`/editor/${project.id}`}>\n                        <Edit className=\"w-4 h-4 ml-2\" />\n                        <span data-testid={`menu-edit-${project.id}`}>تعديل</span>\n                      </Link>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem onClick={handleShare} data-testid={`menu-share-${project.id}`}>\n                      <Share className=\"w-4 h-4 ml-2\" />\n                      <span>مشاركة</span>\n                    </DropdownMenuItem>\n                    {project.deployUrl && (\n                      <DropdownMenuItem asChild>\n                        <a href={project.deployUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                          <Globe className=\"w-4 h-4 ml-2\" />\n                          <span data-testid={`menu-view-live-${project.id}`}>عرض مباشر</span>\n                        </a>\n                      </DropdownMenuItem>\n                    )}\n                    <DropdownMenuItem onClick={handleDelete} className=\"text-destructive focus:text-destructive\" data-testid={`menu-delete-${project.id}`}>\n                      <Trash2 className=\"w-4 h-4 ml-2\" />\n                      <span>حذف</span>\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </div>\n            </div>\n\n            {/* Project Files Preview */}\n            <div className=\"p-4\">\n              <div className=\"bg-slate-900 rounded-lg p-3 text-slate-300 text-xs font-mono leading-relaxed overflow-hidden\" data-testid={`project-code-preview-${project.id}`}>\n                <div className=\"flex items-center mb-2\">\n                  <div className=\"flex space-x-reverse space-x-1 ml-3\">\n                    <div className=\"w-2 h-2 rounded-full bg-red-500\"></div>\n                    <div className=\"w-2 h-2 rounded-full bg-yellow-500\"></div>\n                    <div className=\"w-2 h-2 rounded-full bg-green-500\"></div>\n                  </div>\n                  <span className=\"text-slate-400\">\n                    {Object.keys(project.files)[0] || 'index.html'}\n                  </span>\n                </div>\n                <div className=\"line-clamp-3\">\n                  {Object.values(project.files)[0]?.substring(0, 120) || '<!-- Empty project -->'}\n                  {Object.values(project.files)[0]?.length > 120 && '...'}\n                </div>\n              </div>\n            </div>\n\n            {/* Project Footer */}\n            <div className=\"px-4 pb-4\">\n              <div className=\"flex justify-between items-center text-xs text-muted-foreground\">\n                <div className=\"flex items-center\" data-testid={`project-updated-${project.id}`}>\n                  <Calendar className=\"w-3 h-3 ml-1\" />\n                  آخر تحديث: {lastUpdated.toLocaleDateString('ar-EG')}\n                </div>\n                \n                <div className=\"flex items-center gap-3\">\n                  <div className=\"flex items-center\" data-testid={`project-files-count-${project.id}`}>\n                    <Code className=\"w-3 h-3 ml-1\" />\n                    {Object.keys(project.files).length} ملف\n                  </div>\n                  \n                  {project.isPublic && (\n                    <Badge variant=\"outline\" className=\"text-xs\" data-testid={`project-public-badge-${project.id}`}>\n                      <Globe className=\"w-3 h-3 ml-1\" />\n                      عام\n                    </Badge>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </Link>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7929},"client/src/components/templates/template-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Download, Eye, Star, Crown } from \"lucide-react\";\n\ninterface Template {\n  id: string;\n  name: string;\n  description: string;\n  category: string;\n  previewImage?: string;\n  downloads: number;\n  isPremium: boolean;\n}\n\ninterface TemplateCardProps {\n  template: Template;\n  onUse: () => void;\n  isLoading?: boolean;\n}\n\nexport default function TemplateCard({ template, onUse, isLoading = false }: TemplateCardProps) {\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case 'business':\n        return 'from-blue-500 to-cyan-600';\n      case 'ecommerce':\n        return 'from-green-500 to-teal-600';\n      case 'blog':\n        return 'from-purple-500 to-pink-600';\n      case 'dashboard':\n        return 'from-orange-500 to-red-600';\n      case 'portfolio':\n        return 'from-indigo-500 to-purple-600';\n      default:\n        return 'from-gray-500 to-slate-600';\n    }\n  };\n\n  const getCategoryName = (category: string) => {\n    switch (category) {\n      case 'business':\n        return 'موقع شركة';\n      case 'ecommerce':\n        return 'متجر إلكتروني';\n      case 'blog':\n        return 'مدونة';\n      case 'dashboard':\n        return 'لوحة تحكم';\n      case 'portfolio':\n        return 'معرض أعمال';\n      default:\n        return 'عام';\n    }\n  };\n\n  return (\n    <Card className=\"overflow-hidden hover:scale-105 transition-transform group border border-border\" data-testid={`template-card-${template.id}`}>\n      {/* Template Preview */}\n      <div className={`aspect-video bg-gradient-to-br ${getCategoryColor(template.category)} relative overflow-hidden`}>\n        {template.isPremium && (\n          <div className=\"absolute top-3 right-3 bg-yellow-500/20 backdrop-blur-sm text-yellow-600 px-2 py-1 rounded-full text-xs font-bold flex items-center\" data-testid={`template-premium-badge-${template.id}`}>\n            <Crown className=\"w-3 h-3 ml-1\" />\n            مميز\n          </div>\n        )}\n        \n        <div className=\"absolute inset-0 bg-white/10 backdrop-blur-sm p-4\">\n          <div className=\"bg-white/20 rounded p-2 mb-2 text-white text-xs\" data-testid={`template-category-${template.id}`}>\n            {getCategoryName(template.category)}\n          </div>\n          \n          {/* Mock website layout based on category */}\n          {template.category === 'ecommerce' && (\n            <div className=\"space-y-2\">\n              <div className=\"grid grid-cols-3 gap-1 mb-2\">\n                <div className=\"bg-white/30 rounded h-8\"></div>\n                <div className=\"bg-white/30 rounded h-8\"></div>\n                <div className=\"bg-white/30 rounded h-8\"></div>\n              </div>\n              <div className=\"bg-white/30 rounded h-4 mb-1\"></div>\n              <div className=\"bg-white/30 rounded h-4 w-3/4\"></div>\n            </div>\n          )}\n          \n          {template.category === 'business' && (\n            <div className=\"space-y-2\">\n              <div className=\"bg-white/30 rounded h-6 mb-2\"></div>\n              <div className=\"grid grid-cols-2 gap-2 mb-2\">\n                <div className=\"bg-white/30 rounded h-12\"></div>\n                <div className=\"bg-white/30 rounded h-12\"></div>\n              </div>\n              <div className=\"bg-white/30 rounded h-3 mb-1\"></div>\n              <div className=\"bg-white/30 rounded h-3 w-2/3\"></div>\n            </div>\n          )}\n          \n          {template.category === 'dashboard' && (\n            <div className=\"space-y-2\">\n              <div className=\"grid grid-cols-4 gap-1 mb-2\">\n                <div className=\"bg-white/30 rounded h-4\"></div>\n                <div className=\"bg-white/30 rounded h-4\"></div>\n                <div className=\"bg-white/30 rounded h-4\"></div>\n                <div className=\"bg-white/30 rounded h-4\"></div>\n              </div>\n              <div className=\"bg-white/30 rounded h-8 mb-1\"></div>\n              <div className=\"grid grid-cols-2 gap-1\">\n                <div className=\"bg-white/30 rounded h-6\"></div>\n                <div className=\"bg-white/30 rounded h-6\"></div>\n              </div>\n            </div>\n          )}\n          \n          {(template.category === 'blog' || template.category === 'portfolio') && (\n            <div className=\"space-y-2\">\n              <div className=\"bg-white/30 rounded h-8 mb-2\"></div>\n              <div className=\"bg-white/30 rounded h-3 mb-1\"></div>\n              <div className=\"bg-white/30 rounded h-3 mb-1\"></div>\n              <div className=\"bg-white/30 rounded h-3 w-1/2\"></div>\n              <div className=\"grid grid-cols-2 gap-1 mt-2\">\n                <div className=\"bg-white/30 rounded h-6\"></div>\n                <div className=\"bg-white/30 rounded h-6\"></div>\n              </div>\n            </div>\n          )}\n        </div>\n        \n        {/* Hover overlay */}\n        <div className=\"absolute inset-0 bg-black/50 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center\">\n          <Button variant=\"secondary\" size=\"sm\" data-testid={`button-preview-${template.id}`}>\n            <Eye className=\"w-4 h-4 ml-1\" />\n            معاينة\n          </Button>\n        </div>\n      </div>\n\n      <CardContent className=\"p-6\">\n        <div className=\"flex justify-between items-start mb-3\">\n          <h3 className=\"text-xl font-bold leading-tight\" data-testid={`template-name-${template.id}`}>\n            {template.name}\n          </h3>\n          <Badge variant=\"outline\" data-testid={`template-category-badge-${template.id}`}>\n            {getCategoryName(template.category)}\n          </Badge>\n        </div>\n        \n        <p className=\"text-muted-foreground mb-4 text-sm leading-relaxed\" data-testid={`template-description-${template.id}`}>\n          {template.description}\n        </p>\n        \n        <div className=\"flex justify-between items-center\">\n          <div className=\"flex items-center text-sm text-muted-foreground\" data-testid={`template-stats-${template.id}`}>\n            <Download className=\"w-4 h-4 ml-1\" />\n            <span data-testid={`template-downloads-${template.id}`}>{template.downloads.toLocaleString('ar-EG')} تحميل</span>\n          </div>\n          \n          <Button \n            onClick={onUse}\n            disabled={isLoading}\n            className=\"hover:scale-105 transition-transform\"\n            data-testid={`button-use-template-${template.id}`}\n          >\n            {isLoading ? (\n              <>\n                <div className=\"animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full ml-2\" />\n                جاري الإنشاء...\n              </>\n            ) : (\n              <>\n                <Star className=\"w-4 h-4 ml-2\" />\n                استخدم القالب\n              </>\n            )}\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7033},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}